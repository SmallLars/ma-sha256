#include "sha256.h"

#include "add_prepare_32.h"
#include "shacore_ex1_32.h"
#include "add_32.h"
#include "clausecreator.h"

#include "../common/sha256tools.h"
#include "../common/solvertools.h"
#include "../common/general.h"

#include "../printer/dimacsfileprinter.h"

using std::vector;
using namespace CMSat;

unsigned Sha256::stats[STATS_LENGTH];

static uint32_t sha_k[64] = {\
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2};

// Information for additional clauses
static unsigned prepN[64];
static unsigned coreI[64][9];
static unsigned coreN[64];

static void clause_5_39(ClauseCreator &cc);
static void clause_5_46_M(ClauseCreator &cc);
static void clause_4_39(ClauseCreator &cc);
static void clause_4_39_M(ClauseCreator &cc);
static void clause_4_46(ClauseCreator &cc);
static void clause_4_46_M(ClauseCreator &cc);
static void clause_4_48(ClauseCreator &cc);
static void clause_3_39(ClauseCreator &cc);
static void clause_3_48(ClauseCreator &cc);
static void clause_2_48(ClauseCreator &cc);
static void clause_1_48(ClauseCreator &cc);

Sha256::Sha256() : Modul(32, 24, 8) {
  Add_Prepare_32 prep_add;
  ShaCore_Ex1_32 core(0);
  Add_32 adder;
  output = start + 48 * prep_add.getAdditionalVarCount() + 64 * core.getAdditionalVarCount() + 8 * adder.getAdditionalVarCount() - 256;
}

Sha256::~Sha256() {
}

unsigned* Sha256::getStats() {
  return stats;
}

void Sha256::create(Printer* printer) {
//  printer->newModul(30, "Sha256", this);

  // Input
  unsigned global_input[64];
  for (unsigned i = 0; i < 16; i++) global_input[i] = inputs[i];

  // Status
  unsigned vars[8];
  for (unsigned i = 0; i < 8; i++) vars[i] = inputs[i + 16];

  // 512 Inputbits und 256 Statebits
  unsigned newvars = 0;

  Add_Prepare_32 prep_add;
  ShaCore_Ex1_32 core(0);

  for (unsigned i = 0; i < 64; i++) {
    vector<unsigned> subinputs;
    for (unsigned n = 0; n < 8; n++) {
      subinputs.push_back(vars[n]);
      coreI[i][n] = vars[n];
    }

    if (i < 16) {
      subinputs.push_back(global_input[i]);
    } else {
      vector<unsigned> prepareinputs;
      prepareinputs.push_back(global_input[i - 16]);
      prepareinputs.push_back(global_input[i - 15]);
      prepareinputs.push_back(global_input[i -  7]);
      prepareinputs.push_back(global_input[i -  2]);
      prep_add.setInputs(prepareinputs);
      prep_add.setStart(start + newvars);
      prepN[i] = start + newvars;
      prep_add.create(printer);
      newvars += prep_add.getAdditionalVarCount();

      global_input[i] = prep_add.getOutput();
      subinputs.push_back(prep_add.getOutput());
    }
    coreI[i][8] = global_input[i];

    core.setValue(sha_k[i]);
    core.setInputs(subinputs);
    core.setStart(start + newvars);
    coreN[i] = start + newvars;
    core.create(printer);
    newvars += core.getAdditionalVarCount();

    for (unsigned n = 7; n > 0; n--) vars[n] = vars[n - 1];
    vars[0] = core.getOutput();
    vars[4] = core.getOutput() + 32;
  }

  for (unsigned i = 0; i < 8; i++) {
    vector<unsigned> subinputs;
    subinputs.push_back(inputs[i + 16]);
    subinputs.push_back(vars[i]);
    Add_32 adder;
    adder.setInputs(subinputs);
    adder.setStart(start + newvars);
    adder.setOutput(output + (i * 32));
    adder.create(printer);
    newvars += adder.getAdditionalVarCount() - 32;
  }

#ifdef ADDITIONAL_CLAUSES
  ClauseCreator cc(printer);

  // distance - modulcount + 1 = 5
  clause_5_39(cc);

  clause_5_46_M(cc);

  // distance - modulcount + 1 = 4
  clause_4_39(cc);
  clause_4_39_M(cc);

  clause_4_46(cc);
  clause_4_46_M(cc);

  clause_4_48(cc);

  // distance - modulcount + 1 = 3
  clause_3_39(cc);

  clause_3_48(cc);

  // distance - modulcount + 1 = 2
  clause_2_48(cc);

  // distance - modulcount + 1 = 1
  clause_1_48(cc);

#endif
/*
  DimacsFilePrinter dprinter("./todo/tocheck.dimacs", 0, 0);
  ClauseCreator cc(&dprinter);

  for (unsigned r = 0; r < 46; r++) {
    {

      unsigned valid[46][31] = {
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;


      }

    }
  }
*/

/* DIST 2 - BACKUP - Possible XOR ?
  for (unsigned r = 0; r < 48; r++) {
      for (unsigned b = 0; b < 31; b++) {
        // .XXX
        // 1907 7028 -11675 0
        // 1907 -7028 11675 0
        // -1907 7028 11675 0
        // -1907 -7028 -11675 0
        //                carry[0]          carry[0]                result[0]
        cc.setLiterals(3, coreN[r] + b, coreN[r + 9] + b, prepN[r + 16] + 158 + b);
        //cc.printClause(3,            1,                1,                       0);
        //cc.printClause(3,            1,                0,                       1);
        //cc.printClause(3,            0,                1,                       1);
        //cc.printClause(3,            0,                0,                       0);

      }
  }
*/
}

MU_TEST_C(Sha256::test) {
  SATSolver solver;
  solver.set_verbosity(0);
  solver.log_to_file("test.log");

  uint32_t input[16];
  sha256_padding(input, "Das ist eine Eingabe aus der ein Hash erstellt wird.");
  for (unsigned i = 0; i < 16; i++) {
    solver_writeInt(solver, i * 32, 32, input[i]);
  }

  uint32_t state[8] = {0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19};
  for (unsigned i = 16; i < 24; i++) {
    solver_writeInt(solver, i * 32, 32, state[i - 16]);
  }

  sha256_calc(state, input);

  Sha256 sha256;
  sha256.append(&solver);

  lbool ret = solver.solve();
  mu_assert(ret == l_True, "SHA256 UNSAT");

  uint32_t output[8] = {0x27931f0e, 0x7e53670d, 0xdbec1a1c, 0xe23e21b4, 0x663c63c0, 0xd17117ee, 0x1a934bc0, 0xc294dbe9};

  for (unsigned i = 0; i < 8; i++) {
    mu_assert(output[i] == solver_readInt(solver, sha256.getOutput() + i * 32, 32), "SHA256 failed");
    mu_assert(output[i] == state[i], "SHA256 failed");
  }
}

static void clause_5_39(ClauseCreator &cc) {
  for (unsigned r = 0; r < 39; r++) {
    {
      // distance = 8
      // modulcount = 4
      //
      // For every bit from 0 to 28 do:
      //     If round const bit 2 is zero:
      //         While zero bits follow:
      //             Clauses .1 and .3 are valid
      //         On first one bit clauses .2 and .4 are valid
      //     From 0 or after first one bit:
      //         Clauses .2 and .4 are valid if const bit is zero
      unsigned b = 0;
      if ((sha_k[r + 18] & 0x2) == 0) {
        for (; true ; b++) {
          if ((sha_k[r + 18] >> (b + 2)) & 0x1) {
            goto start;
          } else {
            // .1
            // -15595 -31374 -33144 38772 0
            //                  result[0]                 carry[2]               carry[2]                 carry[2]
            cc.setLiterals(4, coreI[r][7] + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
            cc.printClause(4,               0,                       0,                     0,                       1);
            // .3
            //                  result[0]                 carry[2]               carry[2]                 carry[1]                result[2]
            cc.setLiterals(5, coreI[r][7] + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 128 + b, prepN[r + 25] + 160 + b);
            cc.printClause(5,               0,                       0,                     0,                       1,                       0);
          }
        }
      }
      for (; b < 29; b++) {
        if (((sha_k[r + 18] >> (b + 2)) & 0x1) == 0) {
          start:
          // .2
          // -1875 -14112 -14143 -15882 21510 0
          //                  result[0]                 carry[2]                result[2]               carry[2]                 carry[2]
          cc.setLiterals(5, coreI[r][7] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
          cc.printClause(5,               0,                       0,                       0,                     0,                       1);
          // .4
          // -24661 -40440 -40471 -42210 47837 -47869 0
          //                  result[0]                 carry[2]                result[2]
          cc.setLiterals(3, coreI[r][7] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b);
          //                         carry[2]                 carry[1]                result[2]
          cc.addLiterals(3, coreN[r + 18] + 2 + b, prepN[r + 25] + 128 + b, prepN[r + 25] + 160 + b);
          cc.printClause(6, 0, 0, 0, 0, 1, 0);
        }
      }
    }
    {
      unsigned valid[39][4] = {
        {0,0,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {0,1,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,1,0},
        {0,0,0,0},
        {1,0,0,0},
        {0,1,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {0,0,0,1},
        {0,0,0,0},
        {0,0,1,0},
        {0,0,0,0},
        {0,1,0,0},
        {1,0,0,0},
        {1,0,0,0},
        {0,0,1,0},
        {0,0,0,0},
        {0,1,0,0},
        {1,0,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b] == 0) continue;

        // .5
        // -705 -10824 -10855 12625 18222 0
        // -1306 -13290 -13321 15091 20688 0
        // -3583 -16579 -16610 18380 23977 0
        // -7566 -22333 -22364 24134 29731 0
        // -8134 -23154 -23185 24955 30552 0
        // -9272 -24798 -24829 26599 32196 0
        // -13953 -29732 -29763 31533 37130 0
        // -16417 -32196 -32227 33997 39594 0
        // -18063 -33842 -33873 35643 41240 0
        // -19706 -35485 -35516 37286 42883 0
        // -20527 -36306 -36337 38107 43704 0
        //                  result[0]                 carry[2]                result[2]               result[2]                 carry[2]
        cc.setLiterals(5, coreI[r][7] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b, coreN[r + 18] + 33 + b, prepN[r + 25] + 129 + b);
        cc.printClause(5,               0,                       0,                       0,                      1,                       1);

        // .6
        // -705 -10824 -10855 12625 18221 -18253 0
        // -1306 -13290 -13321 15091 20687 -20719 0
        // -3583 -16579 -16610 18380 23976 -24008 0
        // -7566 -22333 -22364 24134 29730 -29762 0
        // -8134 -23154 -23185 24955 30551 -30583 0
        // -9272 -24798 -24829 26599 32195 -32227 0
        // -13953 -29732 -29763 31533 37129 -37161 0
        // -16417 -32196 -32227 33997 39593 -39625 0
        // -18063 -33842 -33873 35643 41239 -41271 0
        // -19706 -35485 -35516 37286 42882 -42914 0
        // -20527 -36306 -36337 38107 43703 -43735 0
        //                  result[0]                 carry[2]                result[2]
        cc.setLiterals(3, coreI[r][7] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b);
        //                         result[2]                 carry[1]                result[2]
        cc.addLiterals(3, coreN[r + 18] + 33 + b, prepN[r + 25] + 128 + b, prepN[r + 25] + 160 + b);
        cc.printClause(6, 0, 0, 0, 1, 1, 0);
      }
    }
    {
      // 5_39
    }
  }
}

static void clause_5_46_M(ClauseCreator &cc) {
  for (unsigned r = 0; r < 46; r++) {
    {
      unsigned valid[46][12] = {
        {1,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,1,1,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,1,1,1,0},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,1,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,1,1,1,0},
        {1,1,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,1,1,1,1},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,0,1,1,1,1},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0},
        {1,1,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,1,1,0,0},
        {1,1,1,0,1,1,0,0,1,1,1,0},
        {1,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b] == 1) {
          // 4: 58    5: 11

          // .1
          // 29032 -42058 -43828 0
          // 33142 -46168 -47938 0
          //                carry[0]                 carry[0]           carry[0]
          cc.setLiterals(3, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
          cc.printClause(3,            1,                       0,                 0);
        }
        if (valid[r][b + 4] == 1) {
          // 4: 39    5: 7

          // .2
          // gültig bei 1 bits am anfang
          //                carry[0]                 carry[0]               result[0]
          cc.setLiterals(3, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + 31 + b);
          cc.printClause(3,            1,                       0,                      1);
        }
        if (valid[r][b + 8] == 1) {
          // 4: 45    5: 10

          // .3
          //                    result[0]                 carry[0]               carry[0]
          cc.setLiterals(3, coreN[r] + 31 + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
          cc.printClause(3,                 0,                       0,                 0);
        }
      }
    }
    {
      unsigned valid[46][30] = {
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0},
        {1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
        {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0},
        {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0},
        {1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},
        {0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},
        {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1},
        {1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0},
        {1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1},
        {1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1},
        {1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0},
        {0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1},
        {1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1},
        {1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0},
        {0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0},
        {1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // 4: 330    5: 70

        // .4
        // -29856 42882 42912 -44652 0
        //                    carry[1]                 carry[1]                result[0]               carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, prepN[r + 16] + 158 + b, coreN[r + 18] + 1 + b);
        cc.printClause(4,                0,                       1,                       1,                     0);
      }
    }
    {
      unsigned valid[46][30] = {
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0},
        {1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
        {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0},
        {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0},
        {1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},
        {0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},
        {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1},
        {1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0},
        {0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1},
        {0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1},
        {1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0},
        {0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1},
        {1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1},
        {1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0},
        {0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0},
        {1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        //  4: 320    5: 68

        // .5
        // -775 10006 10036 11775 0    as example and 224 more
        //                    carry[1]                 carry[1]                result[0]           carry[0]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, prepN[r + 16] + 158 + b, coreN[r + 18] + b);
        cc.printClause(4,                0,                       1,                       1,                 1);
      }
    }
    {
      // 5_46_M
    }
  }
}

static void clause_4_39(ClauseCreator &cc) {
  for (unsigned r = 0; r < 39; r++) {
    {
      // distance = 8
      // modulcount = 5

      // Clause .1 is valid on bit -2
      // While zero bits follow:
      //     Clauses .1 and .3 are valid
      // On first one bit if bit >= 0 clause .2 is valid
      // For every bit from max(0, bit) to 28 do:
      //     Clause .2 is valid if const bit is zero
      signed b = -2;
      while (true) {
        // .1
        // 7916 -19866 -21636 27264 0
        // 15377 -28086 -29856 35484 0
        //                      carry[2]                 carry[2]               carry[2]                 carry[2]
        cc.setLiterals(4, coreN[r] + 319 + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
        cc.printClause(4,                  1,                       0,                     0,                       1);

        b++;
        if (b >= 0) {
          // .3
          // -15595 -31374 -33112 -33143 38772 0
          //                  result[0]                 carry[2]                 result[2]               carry[1]                 carry[2]
          cc.setLiterals(5, coreI[r][7] + b, prepN[r + 16] + 129 + b, coreI[r + 18][8] + 2 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 129 + b);
          cc.printClause(5,               0,                       0,                        0,                     0,                       1);
        }

        if ((sha_k[r + 18] >> (b + 2)) & 0x1) {
          goto start;
        }
      }
      for (; b < 29; b++) {
        // Exceptions
        if (r ==  0 && b ==  0) goto start;
        if (r == 10 && b ==  2) goto start;
        if (r == 11 && b == 10) goto start;
        if (r == 13 && b ==  3) goto start;
        if (r == 15 && b == 14) goto start;
        if (r == 17 && b == 17) goto start;
        if (r == 27 && b ==  7) goto start;
        if (r == 28 && b ==  5) goto start;

        if (((sha_k[r + 18] >> (b + 2)) & 0x1) == 0) {
          start:
          if (b < 0) continue;
          // .2
          // -737 1088 -10002 -10033 -11772 17400 0
          //                  result[0]            carry[2]                 carry[2]
          cc.setLiterals(3, coreI[r][7] + b, coreN[r] + 319 + b, prepN[r + 16] + 129 + b);
          //                          result[2]               carry[2]                 carry[2]
          cc.addLiterals(3, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
          cc.printClause(6, 0, 1, 0, 0, 0, 1);
        }
      }
    }
    for (unsigned b = 0; b < 29; b++) {
      // always valid
      // -713 -10832 -10863 -12570 -12601 18230 0
      // -1321 -13305 -13336 -15043 -15074 20703 0
      // -1323 -13307 -13338 -15045 -15076 20705 0    as examples and 120 more
      //                  result[0]                 carry[2]                result[2]
      cc.setLiterals(3, coreI[r][7] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b);
      //                           result[2]               carry[1]                 carry[2]
      cc.addLiterals(3, coreI[r + 18][8] + 2 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 129 + b);
      cc.printClause(6, 0, 0, 0, 0, 0, 1);

      // always valid
      // -25477 35596 -41256 -41287 -43026 48653 0
      // -25484 35603 -41263 -41294 -43033 48660 0
      //                  result[0]                result[2]                 carry[2]
      cc.setLiterals(3, coreI[r][7] + b, coreI[r + 9][8] + 2 + b, prepN[r + 16] + 129 + b);
      //                          result[2]               carry[2]                 carry[1]
      cc.addLiterals(3, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 128 + b);
      cc.printClause(6, 0, 1, 0, 0, 0, 1);

      // always valid
      // -25477 35595 35596 -41256 -41287 -43026 48652 0
      // -25484 35602 35603 -41263 -41294 -43033 48659 0
      //                  result[0]                result[1]                result[2]                 carry[2]
      cc.setLiterals(4, coreI[r][7] + b, coreI[r + 9][8] + 1 + b, coreI[r + 9][8] + 2 + b, prepN[r + 16] + 129 + b);
      //                          result[2]               carry[2]                 carry[0]
      cc.addLiterals(3, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 127 + b);
      //XXX cc.printClause(7, 0, 1, 1, 0, 0, 0, 1);
    }
    {
      unsigned valid[39][4] = {
        {0,0,0,0},
        {0,0,0,0},
        {1,1,1,1},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {1,1,1,0},
        {1,1,0,0},
        {1,1,1,0},
        {1,0,0,0},
        {1,1,1,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {1,1,0,0},
        {0,0,0,0},
        {1,1,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {1,0,0,0},
        {1,1,0,0},
        {0,0,0,0},
        {1,1,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {1,0,0,0},
        {1,1,0,0},
        {0,0,0,0},
        {1,1,1,1},
        {1,1,0,0},
        {0,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b] == 0) continue;

        // .5
        // 27389 42185 -47813 0
        //                carry[0]           carry[0]                 carry[0]
        cc.setLiterals(3, coreN[r] + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(3,            1,                 1,                       0);

        // .6
        // -1938 13414 -19042 0
        // -5921 19168 -24796 0
        // -6491 19991 -25619 0
        // -7059 20812 -26440 0
        // -8198 22457 -28085 0
        // -8766 23278 -28906 0
        // -26599 41364 -46992 0
        //                    result[0]           carry[0]                 carry[0]
        cc.setLiterals(3, coreN[r] + 31 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(3,                 0,                 1,                       0);
      }
    }
    {
      bool firstZeroValid = false;
      if ((sha_k[r + 9] & 0x3) == 3) firstZeroValid = true;
      if (in_array(r, 4, 12, 15, 24, 31)) firstZeroValid = true;
      for (unsigned b = 0; b < 29; b++) {
        if (((sha_k[r + 9] >> (b + 2)) & 0x1) == 0) {
          if (firstZeroValid) firstZeroValid = false;
          else continue;
        }

        // .7
        // -1306 8168 -13290 -13321 -15060 20686 0
        // -4151 11772 -17400 -17431 -19170 24796 0
        // -14774 24925 -30553 -30584 -32323 37949 0
        // -25462 35613 -41241 -41272 -43011 48637 0
        //                  result[0]              carry[2]                 carry[2]
        cc.setLiterals(3, coreI[r][7] + b, coreN[r + 9] + 2 + b, prepN[r + 16] + 129 + b);
        //                          result[2]               carry[2]                 carry[0]
        cc.addLiterals(3, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 127 + b);
        cc.printClause(6, 0, 1, 0, 0, 0, 1);
      }
    }
    {
      bool firstZeroValid = false;
      if (sha_k[r + 18] & 0x1) firstZeroValid = true;
      for (unsigned b = 0; b < 30; b++) {
        if (((sha_k[r + 18] >> (b + 1)) & 0x1) == 0) {
          if (firstZeroValid) firstZeroValid = false;
          else continue;
        }

        // .8
        // 8168 22459 -28087 -28118 28119 0
        //                carry[0]               carry[1]                 carry[1]                result[1]                result[2]
        cc.setLiterals(5, coreN[r] + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 128 + b, prepN[r + 25] + 159 + b, prepN[r + 25] + 160 + b);
        cc.printClause(5,            1,                     1,                       0,                       0,                       1);
      }
    }
    {
      bool firstZeroValid = false;
      if ((sha_k[r + 9] & 0x3) == 3) firstZeroValid = true;
      if (in_array(r, 4, 12, 15, 24, 31)) firstZeroValid = true;
      for (unsigned b = 0; b < 29; b++) {
        if (((sha_k[r + 9] >> (b + 2)) & 0x1) == 0) {
          if (firstZeroValid) {
            if (!(r == 22 && b == 1)) firstZeroValid = false;
          } else {
            continue;
          }
        }

        // .9
        // -641 7599 -12468 -12499 -14238 19865 0
        // -2444 9306 -14934 -14965 -16704 22331 0
        // -4720 12594 -18222 -18253 -19992 25619 0
        // -6427 15060 -20688 -20719 -22458 28085 0
        // -8704 18349 -23977 -24008 -25747 31374 0
        // -14773 24924 -30552 -30583 -32322 37949 0
        // -16417 26568 -32196 -32227 -33966 39593 0
        // -21351 31502 -37130 -37161 -38900 44527 0
        // -23815 33966 -39594 -39625 -41364 46991 0
        // -25461 35612 -41240 -41271 -43010 48637 0
        //                  result[0]              carry[2]                 carry[2]
        cc.setLiterals(3, coreI[r][7] + b, coreN[r + 9] + 2 + b, prepN[r + 16] + 129 + b);
        //                          result[2]               carry[2]                 carry[1]
        cc.addLiterals(3, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 128 + b);
        cc.printClause(6, 0, 1, 0, 0, 0, 1);
      }
    }
    {
      // 4_39
    }
  }
}


static void clause_4_39_M(ClauseCreator &cc) {
  for (unsigned r = 0; r < 39; r++) {
    {
      unsigned valid[39][28] = {
        {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1},
        {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
        {0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
        {0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 28; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 107   4: 12

        // .3
        // 28234 35566 -35568 -41260 -43030 0
        //                    carry[3]                carry[0]                carry[2]                 carry[3]               carry[3]
        cc.setLiterals(5, coreN[r + 7] + 3 + b, prepN[r + 16] + 190 + b, prepN[r + 16] + 192 + b, prepN[r + 23] + 130 + b, coreN[r + 25] + 3 + b);
        cc.printClause(5,                    1,                       1,                       0,                       0,                     0);
      }
    }
    {
      // 4_39_M
    }
  }
}

static void clause_4_46(ClauseCreator &cc) {
  for (unsigned r = 0; r < 46; r++) {
    if (in_array(r, 4, 2, 20, 24, 29)) {
      unsigned b = 0;
      // 1910 -4214 -11647 -13417 0
      //                    carry[3]              result[0]                 carry[3]               carry[3]
      cc.setLiterals(4, coreN[r] + 3 + b, coreN[r + 4] + 31 + b, prepN[r + 16] + 130 + b, coreN[r + 18] + 3 + b);
      cc.printClause(4,                1,                     0,                       0,                     0);
    }
    {
    }
    {
      // 4_46
    }
  }
}

static void clause_4_46_M(ClauseCreator &cc) {
  for (unsigned r = 0; r < 46; r++) {
    {
      unsigned valid[46][8] = {
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,0,0},
        {1,1,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0},
        {1,1,1,0,1,0,0,0},
        {1,1,0,0,0,1,0,0},
        {1,1,1,0,0,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,1,1,0,0,1,0,0},
        {1,0,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,0},
        {0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,0,0},
        {1,1,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0},
        {1,1,1,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {1,1,1,1,0,1,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b] == 1) {
          // 2: 63    4: 12

          // .1
          // 41363 -46991 -48761 0
          //                    carry[0]                 carry[0]           carry[0]
          cc.setLiterals(3, coreN[r + 9] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
          cc.printClause(3,                1,                       0,                 0);
        }
        if (valid[r][b + 4] == 1) {
          // 3: 23    4: 4

          // .2
          // -33997 41363 -46992 -48762 0
          //                    result[1]          carry[0]                 carry[1]               carry[1]
          cc.setLiterals(4, coreN[r] + 32 + b, coreN[r + 9] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b);
          cc.printClause(4,                 0,                1,                       0,                     0);
        }
      }
    }
    {
      unsigned valid[46][29] = {
        {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1},
        {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
        {1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
        {0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 148    4: 13

        // .3
        // 28234 35598 -41260 -43030 0
        //                    carry[2]            result[0]                 carry[2]               carry[2]
        cc.setLiterals(4, coreN[r] + 2 + b, coreI[r + 9][8] + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b);
        cc.printClause(4,                1,                   1,                       0,                     0);
      }
    }
    {
      unsigned valid[46][30] = {
        {0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0},
        {0,1,0,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1},
        {1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0},
        {0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1},
        {1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
        {0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0},
        {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0},
        {0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0},
        {1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0},
        {0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 307    4: 37

        // .4
        // 28234 35599 -41260 -43030 0
        //                    carry[1]            result[0]                 carry[1]               carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, coreI[r + 9][8] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b);
        cc.printClause(4,                1,                   1,                       0,                     0);
      }
    }
    {
      bool exception = true;
      for (unsigned b = 0; b < 31; b++) {
        if (((sha_k[r] >> b) & 0x1) == 0) {
          // Exceptions
          if (r ==  8 && (b == 1 || b == 2)) goto start;
          if (r == 15 &&  b == 1)            goto start;
          if (r == 24 && (b == 2 || b == 3)) goto start;

          if (!exception) continue;
          exception = false;
        }

        start:
        // 3: 638    4: 101

        // .5
        // 27414 34780 -40440 -42210 0
        // 27418 34784 -40444 -42214 0
        // 28224 35590 -41250 -43020 0
        // 28234 35600 -41260 -43030 0
        //                carry[0]            result[0]                 carry[0]           carry[0]
        cc.setLiterals(4, coreN[r] + b, coreI[r + 9][8] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
        cc.printClause(4,            1,                   1,                       0,                 0);
      }
    }
    {
      unsigned valid[46][30] = {
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0},
        {1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
        {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0},
        {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0},
        {1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},
        {0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},
        {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1},
        {1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0},
        {0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1},
        {0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1},
        {1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0},
        {0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1},
        {1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1},
        {1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0},
        {0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0},
        {1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 320    4: 68

        // .6
        // -28240 41266 41296 -43004 0
        //                    carry[1]                 carry[1]                result[0]                 result[1]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, prepN[r + 16] + 158 + b, coreI[r + 18][8] + 1 + b);
        cc.printClause(4,                0,                       1,                       1,                        0);
      }
    }
    {
      unsigned valid[46][31] = {
        {1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0},
        {1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1},
        {1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1},
        {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0},
        {1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0},
        {1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1},
        {1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1},
        {1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0},
        {0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
        {1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1},
        {0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1},
        {0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1},
        {0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0},
        {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0},
        {1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1},
        {1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0},
        {1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
        {1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1},
        {1,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1},
        {1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0},
        {1,1,1,0,0,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,0,1},
        {1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1},
        {0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1},
        {1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1},
        {1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0},
        {1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0},
        {1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1},
        {1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 582    4: 101

        // .7
        // 2478 7599 -12468 -14238 0
        // 6461 12594 -18222 -19992 0
        // 8168 15060 -20688 -22458 0
        // 17526 24924 -30552 -32322 0
        // 24104 31502 -37130 -38900 0
        //                carry[0]          carry[0]                 carry[0]           carry[0]
        cc.setLiterals(4, coreN[r] + b, coreN[r + 9] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
        cc.printClause(4,            1,                1,                       0,                 0);
      }
    }
    {
      unsigned valid[46][31] = {
        {1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0},
        {1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1},
        {1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1},
        {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0},
        {1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0},
        {0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1},
        {0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1},
        {1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0},
        {0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
        {1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1},
        {0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1},
        {0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
        {0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1},
        {0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0},
        {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0},
        {1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1},
        {0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0},
        {1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
        {1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1},
        {1,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1},
        {1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0},
        {1,1,1,0,0,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,0,1},
        {1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1},
        {0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1},
        {1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1},
        {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0},
        {1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0},
        {1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1},
        {1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 569    4: 100

        // .8
        // 30679 38077 -43705 45506 0
        // 32320 39718 -45346 47147 0
        //                carry[0]          carry[0]                 carry[0]               result[0]
        cc.setLiterals(4, coreN[r] + b, coreN[r + 9] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + 31 + b);
        cc.printClause(4,            1,                1,                       0,                      1);
      }
    }
    {
      unsigned valid[46][30] = {
        {0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1},
        {1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1},
        {1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0},
        {0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1},
        {0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0},
        {0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
        {0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1},
        {1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0},
        {1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0},
        {0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0},
        {1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
        {0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 291    4: 45

        // .9
        // 6462 12594 -18223 -19993 0
        // 8169 15060 -20689 -22459 0
        // 17527 24924 -30553 -32323 0
        // 24105 31502 -37131 -38901 0
        //                    carry[1]          carry[0]                 carry[1]               carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, coreN[r + 9] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b);
        cc.printClause(4,                1,                1,                       0,                     0);
      }
    }
    {
      unsigned valid[46][29] = {
        {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
        {0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 138    4: 15

        // .10
        // 6463 12594 -18224 -19994 0
        // 8170 15060 -20690 -22460 0
        // 11772 19168 -24798 -26568 0
        //                    carry[2]          carry[0]                 carry[2]               carry[2]
        cc.setLiterals(4, coreN[r] + 2 + b, coreN[r + 9] + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b);
        cc.printClause(4,                1,                1,                       0,                     0);
      }
    }
    {
      unsigned valid[46][30] = {
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 51    4: 9

        // .11
        // 8170 -14998 -20690 -22460 0
        //                    carry[1]                carry[0]                 carry[1]               carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 9] + 190 + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b);
        cc.printClause(4,                1,                      0,                       0,                     0);
      }
    }
    {
      unsigned valid[46][30] = {
        {0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1},
        {1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1},
        {1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0},
        {0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1},
        {0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0},
        {0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
        {0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1},
        {1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0},
        {1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0},
        {0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0},
        {1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0},
        {0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 291    4: 45

        // .12
        // 29034 36431 -42060 -43830 0
        // 30679 38076 -43705 -45475 0
        //                    carry[1]          carry[0]                 carry[1]               carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, coreN[r + 9] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b);
        cc.printClause(4,                1,                1,                       0,                     0);
      }
    }
    {
      unsigned valid[46][31] = {
        {1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1},
        {1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1},
        {1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0},
        {1,1,1,0,0,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1},
        {1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,0},
        {1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,0,1},
        {1,0,1,0,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,0,0},
        {1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0},
        {1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1},
        {1,1,0,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0},
        {1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1,0},
        {1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0,1},
        {1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,1,1},
        {1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0},
        {1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0},
        {1,0,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1},
        {1,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1},
        {1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1},
        {1,1,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0},
        {1,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0},
        {1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,0,1,0,1,1,1,1,0,1,1,0,1,0},
        {1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,1,0,0,1,0,1,0,0,1},
        {1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,1,1,0,1},
        {1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1},
        {1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,0,0},
        {1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0},
        {1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,0},
        {1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1},
        {1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1},
        {1,1,0,0,1,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0},
        {1,1,1,1,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0},
        {1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,0,0,1,0},
        {1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,1,0},
        {1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1},
        {1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1},
        {1,0,1,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,1},
        {1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,1,1,1},
        {1,1,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0},
        {1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0},
        {1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0},
        {1,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,1},
        {1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1},
        {1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,1}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 633    4: 101

        // .13
        // 30679 38045 -43705 45506 0
        //                carry[0]            result[0]                 carry[0]               result[0]
        cc.setLiterals(4, coreN[r] + b, coreI[r + 9][8] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + 31 + b);
        cc.printClause(4,            1,                   1,                       0,                      1);
      }
    }
    {
      unsigned valid[46][30] = {
        {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0},
        {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 83    4: 11

        // .14
        // 30679 -38107 -43705 45506 0
        //                    carry[1]              result[0]                 carry[1]               result[1]
        cc.setLiterals(4, coreN[r] + 1 + b, coreN[r + 9] + 31 + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 32 + b);
        cc.printClause(4,                1,                     0,                       0,                      1);
      }
    }
    {
      unsigned valid[46][31] = {
        {1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1},
        {1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0},
        {1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
        {1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 203    4: 29

        // .15
        // 29032 36461 -42058 -43828 0
        //                carry[0]              result[0]                 carry[0]               carry[0]
        cc.setLiterals(4, coreN[r] + b, coreN[r + 9] + 31 + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
        cc.printClause(4,            1,                     1,                       0,                 0);
      }
    }
    {
      unsigned valid[46][31] = {
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 89    4: 15

        // .16
        // -31533 38868 -44528 -46298 0
        // -33997 41332 -46992 -48762 0
        //                    result[0]            result[0]                 carry[0]           carry[0]
        cc.setLiterals(4, coreN[r] + 31 + b, coreI[r + 9][8] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
        cc.printClause(4,                 0,                   1,                       0,                 0);
      }
    }
    {
      unsigned valid[46][31] = {
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0},
        {1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // 3: 180    4: 36

        // .17
        // -31533 38900 -44528 -46298 0
        // -33997 41364 -46992 -48762 0
        //                    result[0]          carry[0]                 carry[0]           carry[0]
        cc.setLiterals(4, coreN[r] + 31 + b, coreN[r + 9] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b);
        cc.printClause(4,                 0,                1,                       0,                 0);
      }
    }
    {
      // 4_46_M
    }
  }
}

static void clause_4_48(ClauseCreator &cc) {
  for (unsigned r = 0; r < 48; r++) {
    {
      unsigned valid[48][20] = {
        {1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b] == 1) {
          // .1

          // -738 2 -6208 6270 -6271 10032 0
          // -28748 31467 -39214 39276 -39277 44556 0
          //                      result[1]            result[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + 1 + b, coreI[r][8] + 1 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 1, 0, 1, 0, 1);

          // -737 2 -6208 6270 -6271 10032 0
          // -28747 31467 -39214 39276 -39277 44556 0
          //                  result[0]            result[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + b, coreI[r][8] + 1 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 1, 0, 1, 0, 1);

          // -737 -738 2 -6208 6270 -6271 10032 0
          // -28747 -28748 31467 -39214 39276 -39277 44556 0
        }
        if (valid[r][b + 4] == 1) {
          // .2

          // -9273 -11771 -19486 19548 -19549 24828 0
          //                      result[1]          carry[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + 1 + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 0, 0, 1, 0, 1);

          // -9272 -11771 -19486 19548 -19549 24828 0
          //                  result[0]          carry[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 0, 0, 1, 0, 1);

          // -9272 -9273 -11771 -19486 19548 -19549 24828 0
        }
        if (valid[r][b + 8] == 1) {
          // .3

          unsigned carry_0 = (r == 27 || r == 41 ? CC_DC : 1);
          // -11485 14237 -21952 22014 -22015 27294 0
          // -13129 15881 -23596 23658 -23659 28938 0
          // -16417 19169 -26884 (26946) -26947 32226 0
          // -27925 30677 -38392 (38454) -38455 43734 0
          //                  result[0]          carry[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 1, 0, carry_0, 0, 1);

          // -11486 14237 -21952 22014 -22015 27294 0
          // -13130 15881 -23596 23658 -23659 28938 0
          //                      result[1]          carry[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + 1 + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 1, 0, carry_0, 0, 1);
        }
        if (valid[r][b + 12] == 1) {
          // .4

          // -642 2508 -7915 7977 -7978 12498 0
          // -14774 17556 -25240 25302 -25303 30582 0
          // -27104 29886 -37570 37632 -37633 42912 0
          //                      result[1]          result[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + 1 + b, coreN[r] + 32 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 1, 0, 1, 0, 1);

          // -641 2508 -7915 7977 -7978 12498 0
          // -18061 20844 -28528 28590 -28591 33870 0
          //                  result[0]          result[1]                carry[1]
          cc.setLiterals(3, coreI[r][7] + b, coreN[r] + 32 + b, coreN[r + 9] + 318 + b);
          //                          carry[0]                carry[1]                result[1]
          cc.addLiterals(3, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
          cc.printClause(6, 0, 1, 0, 1, 0, 1);

          // -641 -642 2508 -7915 7977 -7978 12498 0
        }
        if (valid[r][b + 16] == 1) {
          // .5
          // -673 7029 -11645 0
          // -1876 8737 -14112 0
          // -17239 27389 -33017 0
          // -20527 30677 -36305 0
          // -31214 41364 -46992 0
          // -32035 42185 -47813 0
          //                  result[0]              carry[1]                 carry[1]
          cc.setLiterals(3, coreI[r][7] + b, coreN[r + 9] + 1 + b, prepN[r + 16] + 128 + b);
          cc.printClause(3,               0,                    1,                       0);
        }
      }
    }
    {
      // 4_48
    }
  }
}

static void clause_3_39(ClauseCreator &cc) {
  for (unsigned r = 0; r < 39; r++) {
    {
      unsigned valid[39][31] = {
        {2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,1,0,0,0,0,0,2},
        {2,2,2,2,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,0,2,0,0,0,0,0,0,2,0,0,1,0,2,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,2,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
        {2,2,0,0,0,0,0,0,0,0,1,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,2,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2},
        {0,0,0,1,2,0,0,2,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,1,0,0,0,0,0,0,0},
        {1,2,2,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {1,1,2,0,0,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,2,0,0,0,0,2,0,0,1,2,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,2,0,2,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,2,2,2,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,1,1,0,1,0},
        {0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
        {0,0,1,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0},
        {0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,1,0,1,2,0,0,0,2},
        {1,1,1,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,2,0,0,0,0,0,0,1,0,0},
        {2,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0},
        {0,0,0,0,0,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,1,0,0,0,0,1,2,0,0,1,1,1,1,0,0,0,0,0,0,0,2,0,0,0,0,2,0,2,0},
        {1,2,0,0,0,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,0,0,0,0},
        {1,1,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,1,0,1,0,0,0,2},
        {2,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0},
        {1,1,2,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,2,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,2,0,0,0},
        {0,0,0,2,0,0,2,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0},
        {2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        if (valid[r][b] == 1) {
          // .1A
          // 773 -10035 -11775 17403 0
          //                carry[0]                result[0]               carry[1]                 carry[1]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 158 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 128 + b);
          cc.printClause(4,            1,                       0,                     0,                       1);
        }

        // .1B
        // 2478 -12468 -14238 19897 0
        // 2500 -12490 -14260 19919 0
        //                carry[0]                 carry[0]           carry[0]                result[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 158 + b);
        cc.printClause(4,            1,                       0,                 0,                       1);
      }
    }
    {
      unsigned valid[39][30] = {
        {1,1,1,0,0,0,1,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,1,1,1,2,0,0,0},
        {0,1,2,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,2,0,1,2,0,0,0,0,2,0,0,0,0,0,0,0,2,0,1,1,1,2,0,1,2,0,0,0},
        {2,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
        {0,0,1,2,0,1,1,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0},
        {2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,1,1,2,0,0,2,0,0,0,2},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {0,1,2,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,1,1,1,1,1,1,1,1,2,0,2,0,0,0,2,0,2,0,0,1,1,1,1,2,0},
        {1,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0},
        {1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,1,2,0,2,0,2,0,2},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,1,2,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,2,0},
        {0,1,1,1,1,1,1,2,0,1,2,0,1,2,0,0,0,0,2,0,0,0,0,0,0,1,2,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2},
        {1,1,1,1,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,0,1,1,2},
        {1,1,2,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,0,2,0,2,0,0,0,0,0},
        {1,0,2,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,2,0,1,2,0,2,0,0,0,0,1,2,0,0,0,0,0,0,0,2,0,0,0,0,0},
        {2,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,1,1,2,0,0,0,0},
        {1,1,1,2,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,1,2,0,0,0,2,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,1,2},
        {0,0,0,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0},
        {1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {0,0,0,0,0,0,0,0,0,0,2,0,1,2,0,1,1,2,0,0,2,0,0,0,1,1,1,2,0,0},
        {0,1,2,0,0,2,0,0,1,2,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,2,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0},
        {2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,2,0,0,2,0,0,0,2,0,0,0},
        {1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,1,2,0,0,2,0,0},
        {2,0,0,0,0,0,1,1,1,1,2,0,1,2,0,0,1,1,2,0,2,0,0,0,0,0,0,0,0,0},
        {1,1,2,0,1,1,2,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,1,1,2}
      };
      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        if (valid[r][b] == 1) {
          // .2A
          // -1339 10824 12595 -18223 0
          //                carry[0]                 carry[1]               carry[2]                 carry[2]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
          cc.printClause(4,            0,                       1,                     1,                       0);
        }

        // .2B
        // -1339 10824 12594 -18222 0
        //                carry[0]                 carry[1]               carry[1]                 carry[1]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 128 + b);
        cc.printClause(4,            0,                       1,                     1,                       0);
      }
    }
    {
      unsigned valid[39][31] = {
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0},
        {1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0},
        {0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0},
        {0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0},
        {1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1}
      };
      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // .3
        // -2508 12467 14237 -19865 0
        //                    result[0]                 carry[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + 31 + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,                 0,                       1,                 1,                       0);
      }
    }
    {
      unsigned valid[39][31] = {
        {1,0,0,1,2,2,0,0,0,1,1,2,0,2,2,0,0,2,1,2,2,2,0,0,0,0,0,0,0,0,2},
        {1,1,0,0,2,2,0,0,0,0,2,2,2,0,2,0,1,1,2,0,1,2,2,1,2,2,0,0,1,1,2},
        {1,1,1,2,2,0,0,1,1,2,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2},
        {1,1,2,0,0,0,0,0,1,2,0,1,2,1,1,1,2,1,2,1,1,2,0,1,2,0,0,0,0,1,2},
        {1,1,1,1,2,1,2,0,0,2,2,0,0,0,1,2,1,1,2,1,2,0,2,0,2,2,0,0,0,2,0},
        {1,2,2,0,0,1,1,1,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,2,0,0,1,2,0,0},
        {1,0,2,2,0,2,0,2,0,2,2,2,0,0,0,1,1,1,1,1,1,2,2,2,1,2,2,0,0,0,0},
        {2,1,2,0,2,0,0,2,1,1,1,1,2,1,2,0,0,0,1,1,2,0,0,0,1,2,1,2,1,2,2},
        {1,1,1,1,2,2,0,0,0,0,0,2,1,2,1,1,1,1,2,2,2,2,2,2,2,2,1,1,2,0,2},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0},
        {1,1,1,1,1,2,0,0,0,0,2,0,0,0,0,1,2,2,2,1,1,2,0,0,0,0,0,0,0,2,0},
        {1,2,0,0,0,0,0,1,2,1,1,1,1,1,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0},
        {2,1,2,1,1,1,2,1,2,0,1,1,2,0,0,0,0,0,1,1,1,2,0,0,0,0,0,0,1,1,2},
        {1,1,1,1,1,1,1,1,2,2,2,0,1,2,1,2,0,1,1,1,2,0,1,2,2,2,0,0,0,0,0},
        {1,1,2,2,1,2,1,2,1,1,2,0,0,0,0,0,0,0,0,1,2,0,1,1,1,2,0,1,2,0,0},
        {1,1,1,0,0,0,2,1,2,2,2,1,1,1,1,1,1,2,1,1,2,2,1,1,2,0,0,0,0,0,2},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,2,0,0,2,0,0,0,0,0,1,2},
        {1,1,2,2,0,0,0,1,1,1,2,0,0,0,2,2,1,1,1,1,1,2,1,1,1,1,1,2,0,1,2},
        {1,1,2,2,0,0,0,1,2,0,1,1,2,0,0,1,2,0,0,0,0,0,1,1,1,1,1,2,2,0,0},
        {2,0,1,2,0,0,1,1,2,0,0,0,0,2,1,2,2,0,1,2,2,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,2,1,1,2,2,0,0,1,2,1,2,0,0,2,0,0,2,1,1,1,1,2,1,1,2,1,2,2},
        {1,2,0,2,1,2,1,2,2,1,2,0,0,0,0,2,2,0,2,1,1,1,2,2,1,2,1,2,0,0,2},
        {2,1,1,1,2,0,1,1,2,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,2},
        {1,2,1,1,2,1,1,2,2,0,0,2,2,0,0,1,2,0,0,0,0,1,1,2,1,1,2,0,1,1,2},
        {1,1,1,1,2,0,0,0,0,0,0,0,2,1,2,0,0,0,1,1,1,2,0,0,0,0,0,1,2,2,0},
        {2,0,1,2,1,1,2,0,0,1,2,2,0,0,0,1,2,2,0,0,1,2,0,0,0,0,0,2,1,2,0},
        {2,2,1,2,0,0,1,1,1,1,2,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,2,0},
        {1,1,2,2,2,0,1,1,1,1,1,1,1,1,2,1,2,2,1,1,2,1,2,0,1,1,1,1,1,2,0},
        {1,2,0,0,1,1,1,1,1,2,0,2,0,0,0,0,0,0,0,0,0,1,1,2,1,1,2,2,0,0,0},
        {1,1,1,1,0,0,0,0,2,2,2,1,2,0,0,0,1,1,2,0,0,0,0,1,2,1,2,1,2,1,2},
        {1,2,0,0,0,0,2,1,1,2,2,2,1,1,2,0,0,2,0,2,2,0,1,2,0,1,2,0,0,0,0},
        {1,1,1,2,1,1,2,1,2,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,2,0,0,0,0,2,0,0,0,2,0,0,0,0,1,1,2,0,1,2,0,1,1,1,2,2,1,2,2},
        {2,2,0,1,1,2,2,0,2,2,0,0,0,0,0,0,1,2,1,1,2,0,0,0,0,1,1,2,0,0,0},
        {2,0,1,1,1,1,1,1,2,1,1,2,1,1,2,2,2,1,1,2,0,2,2,1,2,1,1,2,0,0,2},
        {1,2,2,0,2,2,0,0,2,0,1,2,2,0,0,0,0,0,0,0,0,2,0,0,1,2,0,0,2,1,2},
        {2,0,0,0,2,1,2,1,1,2,2,0,1,1,2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,1,2},
        {1,2,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,2,0,1,1,2},
        {1,1,1,2,1,2,0,0,2,0,0,2,2,1,1,2,0,0,0,0,0,0,1,1,2,2,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        if (valid[r][b] == 1) {
          // .4A
          // 13427 -26453 -28222 33850 0
          //                    carry[1]                 carry[1]           carry[0]                 carry[0]
          cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
          cc.printClause(4,                1,                       0,                 0,                       1);
        }

        // .4B
        // 5333 -16588 -18358 23986 0
        //                carry[0]                 carry[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,            1,                       0,                 0,                       1);
      }
    }
    {
      unsigned valid[39][29] = {
        {1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0},
        {1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0},
        {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,1},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0},
        {1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1},
        {1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,0},
        {1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1},
        {0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1},
        {1,0,0,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0},
        {1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1},
        {1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1},
        {1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0},
        {1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
        {0,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,1},
        {0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1},
        {1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0},
        {1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1},
        {0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,0},
        {1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0},
        {1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,1},
        {1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0},
        {1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1},
        {0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1},
        {0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0},
        {1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1},
        {0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1},
        {0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
        {1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,1},
        {1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0},
        {1,1,1,1,0,1,0,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0},
        {1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0},
        {0,0,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;
        // .5
        // -15060 28086 28116 29855 -35484 0
        //                    carry[2]                 carry[2]                result[1]               carry[0]                 carry[2]
        cc.setLiterals(5, coreN[r] + 2 + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 159 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 129 + b);
        cc.printClause(5,                0,                       1,                       1,                     1,                       0);
      }
    }
    {
      unsigned valid[39][30] = {
        {1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1},
        {1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1},
        {1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0},
        {1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1},
        {1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0},
        {1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0},
        {0,1,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0},
        {0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0},
        {1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1},
        {1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0},
        {0,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
        {0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .6
        // 15881 -28938 -30676 36305 36336 0
        //                    carry[1]                result[1]           carry[0]                 carry[1]                result[1]
        cc.setLiterals(5, coreN[r] + 1 + b, prepN[r + 16] + 159 + b, coreN[r + 18] + b, prepN[r + 25] + 128 + b, prepN[r + 25] + 159 + b);
        cc.printClause(5,                1,                       0,                 0,                       1,                       1);
      }
    }
    {
      unsigned valid[39][29] = {
        {0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0},
        {0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1},
        {0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0},
        {1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1},
        {1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,0},
        {1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1},
        {0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1},
        {1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,0,1},
        {1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0},
        {1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,1},
        {1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0},
        {1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;

        // .7
        // 16714 -29742 -29773 -31511 37140 0
        //                carry[0]                 carry[2]                result[2]               carry[1]                 carry[2]
        cc.setLiterals(5, coreN[r] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 129 + b);
        cc.printClause(5,            1,                       0,                       0,                     0,                       1);
      }
    }
    for (unsigned b = 0; (sha_k[r + 18] >> b) & 0x1; b++) {
        // .8
        // 8167 20687 22457 -28085 0
        // 10949 23975 25745 -31373 0
        //                carry[0]                 carry[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,            1,                       1,                 1,                       0);
    }
    {
      unsigned valid[39][16] = {
        {1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b + 0] == 1) {
          // .9
          // -17525 30551 32321 -38012 0
          //                carry[0]                 carry[0]           carry[0]                 carry[0]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 190 + b);
          cc.printClause(4,            0,                       1,                 1,                       0);
        }
        if (valid[r][b + 4] == 1) {
          // .10
          // 8736 -21572 -23279 28907 0
          //                carry[0]                 carry[0]           carry[0]                 carry[0]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 190 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
          cc.printClause(4,            1,                       0,                 0,                       1);
        }
        if (valid[r][b + 8] == 1) {
          // .11
          // 19991 -33080 -33111 -34786 40415 0
          //                    carry[1]                 carry[1]                 result[1]           carry[0]                 carry[1]
          cc.setLiterals(5, coreN[r] + 1 + b, prepN[r + 16] + 191 + b, coreI[r + 16][8] + 1 + b, coreN[r + 18] + b, prepN[r + 25] + 128 + b);
          cc.printClause(5,                1,                       0,                        0,                 0,                       1);
        }
        if (b > 0 && valid[r][b + 12] == 1) {
          // for b == 0 already set by Add_Half_1:
          // cc.printClause(4,               1,                  0,                   CC_DC,                   CC_DC);

          // .12
          // 738 -1087 10001 -17399 0
          //                  result[0]            carry[0]                 carry[0]                 carry[0]
          cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, prepN[r + 16] + 127 + b, prepN[r + 25] + 127 + b);
          cc.printClause(4,               1,                  0,                       1,                       0);
        }
      }
    }
    {
      unsigned valid[39][30] = {
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,0},
        {1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,0,0,0},
        {1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0},
        {0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1},
        {1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0},
        {0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,1,0,1,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
        {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
        {1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0},
        {1,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1},
        {1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1},
        {0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
        {0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,1},
        {1,0,1,1,1,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,0,0,1,0,0},
        {0,1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .13
        // -1346 10830 12599 -18228 0    as example and 48 more
        //                    carry[1]                 carry[1]           carry[0]                 carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, coreN[r + 18] + b, prepN[r + 25] + 128 + b);
        cc.printClause(4,                0,                       1,                 1,                       0);
      }
    }
    {
      unsigned valid[39][30] = {
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1},
        {1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1},
        {0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},
        {1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1},
        {0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .14
        // 27414 -40440 -42210 47837 0
        // 28224 -41250 -43020 48647 0
        // 28234 -41260 -43030 48657 0
        //                    carry[1]                 carry[1]               carry[1]                 carry[0]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,                1,                       0,                     0,                       1);
      }
    }
    {
      unsigned valid[39][31] = {
        {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1},
        {0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0},
        {0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0},
        {1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},
        {1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // .15
        // 28234 -41291 -43030 48658 0
        //                carry[0]                result[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 158 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,            1,                       0,                 0,                       1);
      }
    }
    {
      unsigned valid[39][29] = {
        {1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0},
        {0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;

        // .16
        // -28238 41265 43036 -48663 0
        //                carry[0]                 carry[1]               carry[2]                 carry[1]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 128 + b);
        cc.printClause(4,            0,                       1,                     1,                       0);
      }
    }
    {
      unsigned valid[39][30] = {
        {0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,1},
        {0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1},
        {0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0},
        {1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1},
        {1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0},
        {1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0},
        {0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,0,1,0},
        {1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,1,1},
        {1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1},
        {1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .17
        // 7608 -19876 -21646 27274 0
        //                carry[0]                 carry[1]               carry[1]                 carry[1]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 128 + b);
        cc.printClause(4,            1,                       0,                     0,                       1);
      }
    }
    {
      unsigned valid[39][30] = {
        {1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1},
        {1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1},
        {1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0},
        {1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1},
        {1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0},
        {1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0},
        {0,1,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0},
        {0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0},
        {1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1},
        {1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0},
        {0,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
        {0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .18
        // 10949 -23975 -25744 31373 0
        //                    carry[1]                 carry[1]           carry[0]               carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, coreN[r + 18] + b, prepN[r + 25] + 128 + b);
        cc.printClause(4,                1,                       0,                 0,                       1);
      }
    }
    {
      unsigned valid[39][31] = {
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0},
        {1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0},
        {0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0},
        {0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0},
        {1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // .19
        // -10128 23185 24924 -30552 0
        //                carry[0]                result[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 158 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,            0,                       1,                 1,                       0);
      }
    }
    {
      unsigned valid[39][29] = {
        {1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0},
        {0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;

        // .20
        // -10127 23155 24925 -30553 0
        //                carry[0]                 carry[2]               carry[2]                 carry[2]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
        cc.printClause(4,            0,                       1,                     1,                       0);
      }
    }
    {
      // 3_39
    }
  }
}

static void clause_3_48(ClauseCreator &cc) {
  for (unsigned r = 0; r < 48; r++) {
    {
      unsigned valid[48][30] = {
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .1
        // -680 2232 7036 -11652 0
        // -3582 5639 10949 -16577 0
        //                  result[0]            carry[1]              carry[1]                 carry[1]
        cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 318 + b, coreN[r + 9] + 1 + b, prepN[r + 16] + 128 + b);
        cc.printClause(4,               0,                  1,                    1,                       0);
      }
    }
    {
      unsigned valid[48][32] = {
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0}
      };
      for (unsigned b = 1; b < 8; b++) {
        // for b == 0 already set by Add_Half_1:
        // cc.printClause(4,               1,                  0,            CC_DC,                   CC_DC);

        // .2
        //                  result[0]            carry[0]          carry[0]                result[0]
        cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, coreN[r + 9] + b, prepN[r + 16] + 158 + b);

        if (valid[r][b + 8] == 1 && valid[r][b + 16] == 1) {
          // D4: 20
          // .2.2 & .2.3
          cc.printClause(4,             1,                  0,                0,                   CC_DC);
          continue;
        }

        if (valid[r][b] == 1) {
          // .2.1
          // 1307 -3363 8167 -13320 0
          // 6997 -9053 15881 -21540 0
          // 18062 -21130 28211 -33870 0
          cc.printClause(4,             1,                  0,                1,                       0);
        }

        if (valid[r][b + 8] == 1) {
          // .2.2
          // 1307 -3363 -8167 13320 0
          // 6997 -9053 -15881 21540 0
          // 18062 -21130 -28211 33870 0
          cc.printClause(4,             1,                  0,                0,                       1);
        }

        if (valid[r][b + 16] == 1) {
          // .2.3
          cc.printClause(4,             1,                  0,                0,                       0);
        }

        if (valid[r][b + 24] == 1) {
          // .2.4
          cc.printClause(4,             1,                  0,                1,                       1);
        }
      }
    }
    {
      unsigned valid[48][20] = {
        {1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 4; b++) {
        // 1: 47    3: 42

        // .3.1:   -2477 -7915 12467 0
        // .3.5:   15881 -23596 -28907 0
        //
        // .3.1:   cc.printClause(3, 0,                      0,                       1);
        // .3.2:   cc.printClause(3, 0,                      0,                       0);
        // .3.3-4: cc.printClause(3, 0,                      1,                   CC_DC);
        // .3.3:   cc.printClause(3, 0,                      1,                       0);
        // .3.4:   cc.printClause(3, 0,                      1,                       1);
        // .3.5:   cc.printClause(3, 1,                      0,                       0);
        // .3.6:   cc.printClause(3, 1,                      1,                       0);
        //
        //                carry[0]                carry[0]                 carry[0]
        cc.setLiterals(3, coreN[r] + b, coreN[r + 9] + 317 + b, prepN[r + 16] + 127 + b);

        unsigned testval = (valid[r][b + 0] << 2) | (valid[r][b + 4] << 1) | valid[r][b + 8];
        switch (testval) {
          case 1: cc.printClause(3,  0,                      1,                   CC_DC); break;
          case 2: cc.printClause(3,  0,                      0,                       0); break;
          case 3: cc.printClause(3,  0,                      0,                       0);
                  cc.printClause(3,  0,                      1,                   CC_DC); break;
          case 4: cc.printClause(3,  0,                      0,                       1); break;
          case 5: cc.printClause(3,  0,                      0,                       1);
                  cc.printClause(3,  0,                      1,                   CC_DC); break;
          case 6: cc.printClause(3,  0,                      0,                   CC_DC);
          // already set by ConstAdd_32
          // case 7: cc.printClause(3,  0,                  CC_DC,                   CC_DC); break;
        }
        testval = valid[r][b + 12] + valid[r][b + 16];
        if (testval > 0) {
          if (testval == 1) {
            cc.printClause(3,        1,       valid[r][b + 16],                       0);
          } else {
            cc.printClause(3,        1,                  CC_DC,                       0);
          }
        }
      }
    }
    {
      unsigned valid[48][8] = {
        {1,1,1,0,1,1,1,0},
        {0,1,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,1,0},
        {0,1,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,0,0},
        {1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,1,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0},
        {0,1,0,0,1,0,0,0},
        {0,0,0,1,1,1,1,0},
        {0,0,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,1},
        {1,0,0,0,0,0,0,0},
        {0,1,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1}
      };
      for (unsigned b = 0; b < 4; b++) {
        // 3: 35    4: 44

        // .4.1:   -1339 4721 6808 10823 0
        // .4.2:   -2477 5859 -7946 12467 0
        //
        //                carry[0]            result[0]               result[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, coreI[r + 9][7] + b, coreN[r + 9] + 348 + b, prepN[r + 16] + 127 + b);

        unsigned testval = valid[r][b + 0] + valid[r][b + 4];
        if (testval > 0) {
          if (testval == 1) {
            cc.printClause(4,        0,                   1,        valid[r][b + 0],                       1);
          } else {
            cc.printClause(4,        0,                   1,                  CC_DC,                       1);
          }
        }
      }
    }
    {
      unsigned valid[48][4] = {
        {1,1,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,1,1,0},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,1,1,0},
        {1,0,1,1},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,0}
      };
      for (unsigned b = 1; b < 2; b++) {
        // for b == 0 already set by Add_Half_1:
        // cc.printClause(4,               1,                  0,                CC_DC,                   CC_DC);

        // .5.1:   738 -1087 5922 10032 0
        // .5.2:   738 -1087 -5922 -10032 0
        //
        //                  result[0]            carry[0]              result[0]                result[0]
        cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, coreN[r + 9] + 31 + b, prepN[r + 16] + 158 + b);
        if (valid[r][b + 0] == 1 || valid[r][b + 2] == 1) {
          // .5.1 & .5.3
          cc.printClause(4,             1,                  0,       valid[r][b + 0],                       1);
          // .5.2 & .5.4
          cc.printClause(4,             1,                  0,       valid[r][b + 2],                       0);
        }
      }
    }
    {
      unsigned valid[48][32] = {
        {1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0},
        {1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b + 0] == 1) {
          // .6
          // 738 -1087 -5890 10001 0
          //                      result[1]            carry[1]          carry[0]                 carry[1]
          cc.setLiterals(4, coreI[r][7] + 1 + b, coreN[r] + 318 + b, coreN[r + 9] + b, prepN[r + 16] + 128 + b);
          cc.printClause(4,                   1,                  0,                0,                       1);
        }
        if (b > 0 && valid[r][b + 4] == 1) {
          // for b == 0 already set by Add_Half_1:
          // cc.printClause(4,               1,                  0,                 CC_DC,                   CC_DC);

          // .7
          // 738 -1087 -5922 10001 0
          //                  result[0]            carry[0]              result[0]                 carry[0]
          cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, coreN[r + 9] + 31 + b, prepN[r + 16] + 127 + b);
          cc.printClause(4,               1,                  0,                     0,                       1);
        }
        if (valid[r][b + 8] == 1) {
          // .8
          // 1338 -6777 -10823 10853 0
          //                carry[0]                carry[1]                 carry[1]                result[0]
          cc.setLiterals(4, coreN[r] + b, coreN[r + 9] + 318 + b, prepN[r + 16] + 128 + b, prepN[r + 16] + 158 + b);
          cc.printClause(4,            1,                      0,                       0,                       1);
        }
        if (valid[r][b + 12] == 1) {
          // .9
          // -2476 5859 -7915 12467 0
          //                carry[0]                result[1]                carry[1]                 carry[1]
          cc.setLiterals(4, coreN[r] + b, coreI[r + 9][7] + 1 + b, coreN[r + 9] + 318 + b, prepN[r + 16] + 128 + b);
          cc.printClause(4,            0,                       1,                      0,                       1);
        }
        if (valid[r][b + 16] == 1) {
          // .10
          // -2477 -7915 -12497 -12498 0
          //                    carry[1]                carry[1]                result[0]                result[1]
          cc.setLiterals(4, coreN[r] + 1 + b, coreN[r + 9] + 318 + b, prepN[r + 16] + 158 + b, prepN[r + 16] + 159 + b);
          cc.printClause(4,                0,                      0,                       0,                       0);
        }
        if (valid[r][b + 20] == 1 || valid[r][b + 24] == 1) {
          // .11.1:   -23279 -30994 -31057 36336 0
          // .11.1:   -34787 -42502 -42565 47844 0
          // .11.2:   19169 -26884 -26947 32226 0
          // .11.2:   30677 -38392 -38455 43734 0
          //
          //                      carry[0]                carry[0]                carry[0]                result[0]
          cc.setLiterals(4,       coreN[r] + b, coreN[r + 9] + 317 + b, coreN[r + 9] + 380 + b, prepN[r + 16] + 158 + b);

          if (valid[r][b + 20] == 1 && valid[r][b + 24] == 1) {
            // D2: 48
            cc.printClause(4,            CC_DC,                      0,                      0,                       1);
          } else {
            // D3: 27
            cc.printClause(4, valid[r][b + 24],                      0,                      0,                       1);
          }
        }
        if (valid[r][b + 28] == 1) {
          // .12
          // -1656 6460 -10823 0
          //                      carry[0]          carry[0]                 carry[0]
          cc.setLiterals(3, coreN[r] + 317 + b, coreN[r + 9] + b, prepN[r + 16] + 127 + b);
          cc.printClause(3,                  0,                1,                       0);
        }
      }
    }
    {
      unsigned valid[48][18] = {
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 18; b++) {
        if (valid[r][b] == 0) continue;

        // .13
        // prepN[r + 11] is valid because there is no valid bit below r = 5
        // 29872 38672 -38737 -42897 0                 SSIG0
        //                    carry[1]              result[12]               carry[13]                 carry[0]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 11] + 12 + b, prepN[r + 11] + 77 + b, prepN[r + 16] + 127 + b);
        cc.printClause(4,                1,                      1,                      0,                       0);
      }
    }
    {
      unsigned valid[48][31] = {
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0},
        {1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,0,1,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0},
        {1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // .14
        // 4153 -6209 11772 -17400 0
        //                  result[0]            carry[0]          carry[0]                 carry[0]
        cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, coreN[r + 9] + b, prepN[r + 16] + 127 + b);
        cc.printClause(4,               1,                  0,                1,                       0);
      }
    }
    {
      // 3_48
    }
  }
}

static void clause_2_48(ClauseCreator &cc) {
  for (unsigned r = 0; r < 48; r++) {
    {
      for (unsigned b = 0; b < 1; b++) {
        if ((sha_k[r] & 0x1) == 0) continue;

        // .1
        // -1655 -10822 0
        // -2793 -12466 0
        // -3362 -13288 0
        // -6207 -17398 0
        // -9052 -21508 0
        // -17841 -30550 0
        // -19485 -32194 0
        // -21129 -33838 0
        // -29349 -42058 0
        // -30171 -42880 0
        // -30993 -43702 0
        // -33459 -46168 0
        //                      carry[0]                 carry[0]
        cc.setLiterals(2, coreN[r] + 317 + b, prepN[r + 16] + 127 + b);
        cc.printClause(2,                  0,                       0);
      }
    }
    {
      for (unsigned b = 0; b < 1; b++) {
        if ((sha_k[r + 9] & 0x1) == 0) continue;

        // .2
        // -6207 -10000 0
        // -19485 -24796 0
        // -20307 -25618 0
        // -21951 -27262 0
        // -22773 -28084 0
        // -23595 -28906 0
        // -26061 -31372 0
        // -32637 -37948 0
        // -39213 -44524 0
        // -41679 -46990 0
        //                          carry[0]                 carry[0]
        cc.setLiterals(2, coreN[r + 9] + 317 + b, prepN[r + 16] + 127 + b);
        cc.printClause(2,                      0,                       0);
      }
    }
    {
      unsigned valid[48][31] = {
        {0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1},
        {1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0},
        {1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
        {1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // .3
        // 10949 18378 -23975 0
        // 16703 24132 -29729 0
        // 28211 35640 -41237 0
        //                carry[0]              result[0]                 carry[0]
        cc.setLiterals(3, coreN[r] + b, coreN[r + 9] + 31 + b, prepN[r + 16] + 127 + b);
        cc.printClause(3,            1,                     1,                       0);
      }
    }
    {
      // 2_48
    }
  }
}

static void clause_1_48(ClauseCreator &cc) {
  for (unsigned r = 0; r < 48; r++) {
    {
      unsigned valid[48][30] = {
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0},
        {1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
        {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0},
        {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0},
        {1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},
        {0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},
        {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1},
        {1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0},
        {0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1},
        {0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1},
        {1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0},
        {0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1},
        {1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1},
        {1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0},
        {0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0},
        {1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0},
        {1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
        {1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // DIST 5 with dont care
        // -29855 42881 42911 -44682 0
        // -29856 42882 42912 44683 0
        // -29857 42883 42913 -44683 0
        // -33143 46169 46199 -47969 0
        //                    carry[1]                 carry[1]                result[0]
        cc.setLiterals(3, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, prepN[r + 16] + 158 + b);
        cc.printClause(3,                0,                       1,                       1);
      }
    }
    {
      // 1_48
    }
  }
}
