#include "sha256.h"

#include "add_prepare_32.h"
#include "shacore_ex1_32.h"
#include "add_32.h"
#include "clausecreator.h"

#include "../common/sha256tools.h"
#include "../common/solvertools.h"
#include "../common/general.h"

using std::vector;
using namespace CMSat;

unsigned Sha256::stats[STATS_LENGTH];

static uint32_t sha_k[64] = {\
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2};

// Information for additional clauses
static unsigned prepN[64];
static unsigned coreI[64][9];
static unsigned coreN[64];

static void clause_5_39(ClauseCreator &cc);
static void clause_4_39(ClauseCreator &cc);
static void clause_4_48(ClauseCreator &cc);
static void clause_3_39(ClauseCreator &cc);
static void clause_3_48(ClauseCreator &cc);

Sha256::Sha256() : Modul(32, 24, 8) {
  Add_Prepare_32 prep_add;
  ShaCore_Ex1_32 core(0);
  Add_32 adder;
  output = start + 48 * prep_add.getAdditionalVarCount() + 64 * core.getAdditionalVarCount() + 8 * adder.getAdditionalVarCount() - 256;
}

Sha256::~Sha256() {
}

unsigned* Sha256::getStats() {
  return stats;
}

void Sha256::create(Printer* printer) {
  // Input
  unsigned global_input[64];
  for (unsigned i = 0; i < 16; i++) global_input[i] = inputs[i];

  // Status
  unsigned vars[8];
  for (unsigned i = 0; i < 8; i++) vars[i] = inputs[i + 16];

  // 512 Inputbits und 256 Statebits
  unsigned newvars = 0;

  Add_Prepare_32 prep_add;
  ShaCore_Ex1_32 core(0);

  for (unsigned i = 0; i < 64; i++) {
    vector<unsigned> subinputs;
    for (unsigned n = 0; n < 8; n++) {
      subinputs.push_back(vars[n]);
      coreI[i][n] = vars[n];
    }

    if (i < 16) {
      subinputs.push_back(global_input[i]);
    } else {
      vector<unsigned> prepareinputs;
      prepareinputs.push_back(global_input[i - 16]);
      prepareinputs.push_back(global_input[i - 15]);
      prepareinputs.push_back(global_input[i -  7]);
      prepareinputs.push_back(global_input[i -  2]);
      prep_add.setInputs(prepareinputs);
      prep_add.setStart(start + newvars);
      prepN[i] = start + newvars;
      prep_add.create(printer);
      newvars += prep_add.getAdditionalVarCount();

      global_input[i] = prep_add.getOutput();
      subinputs.push_back(prep_add.getOutput());
    }
    coreI[i][8] = global_input[i];

    core.setValue(sha_k[i]);
    core.setInputs(subinputs);
    core.setStart(start + newvars);
    coreN[i] = start + newvars;
    core.create(printer);
    newvars += core.getAdditionalVarCount();

    for (unsigned n = 7; n > 0; n--) vars[n] = vars[n - 1];
    vars[0] = core.getOutput();
    vars[4] = core.getOutput() + 32;
  }

  for (unsigned i = 0; i < 8; i++) {
    vector<unsigned> subinputs;
    subinputs.push_back(inputs[i + 16]);
    subinputs.push_back(vars[i]);
    Add_32 adder;
    adder.setInputs(subinputs);
    adder.setStart(start + newvars);
    adder.setOutput(output + (i * 32));
    adder.create(printer);
    newvars += adder.getAdditionalVarCount() - 32;
  }

#ifdef ADDITIONAL_CLAUSES
  ClauseCreator cc(printer);

  // distance - modulcount + 1 = 5
  clause_5_39(cc);

  // distance - modulcount + 1 = 4
  clause_4_39(cc);
  clause_4_48(cc);

  // distance - modulcount + 1 = 3
  clause_3_39(cc);
  clause_3_48(cc);
#endif

//  ClauseCreator cc(printer);

  for (unsigned r = 0; r < 48; r++) {
    {
/*
      unsigned valid[39][4] = {
        {1,0,0,0},
        {1,0,0,0}
      };

      for (unsigned b = 0; b < 1; b++) {
//        if (valid[r][b] == 0) continue;


      }
*/
    }
  }

/*
  for (unsigned r = 0; r < 46; r++) {
      for (unsigned b = 0; b < 29; b++) {
        // .1
        // 28234 35598 -41260 -43030 0
        //                    carry[2]            result[0]                 carry[2]               carry[2]
        cc.setLiterals(4, coreN[r] + 2 + b, coreI[r + 9][8] + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b);
        cc.printClause(4,                1,                   1,                       0,                     0);
      }
  }
*/

/*
  for (unsigned r = 0; r < 46; r++) {
      for (unsigned b = 0; b < 30; b++) {
        // .2
        // 28234 35599 -41260 -43030 0
        //                    carry[1]            result[0]                 carry[1]               carry[1]
        cc.setLiterals(4, coreN[r] + 1 + b, coreI[r + 9][8] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b);
        cc.printClause(4,                1,                   1,                       0,                     0);
      }
  }
*/

/*
  for (unsigned r = 7; r < 46; r++) {
      for (unsigned b = 0; b < 28; b++) {
        // .3
        // 28234 35566 -35568 -41260 -43030 0
        //                    carry[3]                carry[0]                carry[2]                 carry[3]               carry[3]
        cc.setLiterals(5, coreN[r] + 3 + b, prepN[r + 9] + 190 + b, prepN[r + 9] + 192 + b, prepN[r + 16] + 130 + b, coreN[r + 18] + 3 + b);
        cc.printClause(5,                1,                      1,                      0,                       0,                     0);
      }
  }
*/

}

MU_TEST_C(Sha256::test) {
  SolverConf config;
  config.verbosity = 0;//9;

  SATSolver solver(config);
  solver.log_to_file("test.log");

  uint32_t input[16];
  sha256_padding(input, "Das ist eine Eingabe aus der ein Hash erstellt wird.");
  for (unsigned i = 0; i < 16; i++) {
    solver_writeInt(solver, i * 32, 32, input[i]);
  }

  uint32_t state[8] = {0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19};
  for (unsigned i = 16; i < 24; i++) {
    solver_writeInt(solver, i * 32, 32, state[i - 16]);
  }

  sha256_calc(state, input);

  Sha256 sha256;
  sha256.append(&solver);

  lbool ret = solver.solve();
  mu_assert(ret == l_True, "SHA256 UNSAT");

  uint32_t output[8] = {0x27931f0e, 0x7e53670d, 0xdbec1a1c, 0xe23e21b4, 0x663c63c0, 0xd17117ee, 0x1a934bc0, 0xc294dbe9};

  for (unsigned i = 0; i < 8; i++) {
    mu_assert(output[i] == solver_readInt(solver, sha256.getOutput() + i * 32, 32), "SHA256 failed");
    mu_assert(output[i] == state[i], "SHA256 failed");
  }
}

static void clause_5_39(ClauseCreator &cc) {
/*
    distance = 8
    modulcount = 4

    For every bit from 0 to 28 do:
        If round const bit 2 is zero:
            While zero bits follow:
                Clause with 4 literals is valid
            On first one bit clause with 5 literals is valid
        From 0 or after first one bit:
            Clause with 5 literals is valid if const bit is zero

    valid for r < 39
*/
  for (unsigned r = 0; r < 39; r++) {
    unsigned b = 0;
    if ((sha_k[r + 18] & 0x2) == 0) {
      for (; true ; b++) {
        if ((sha_k[r + 18] >> (b + 2)) & 0x1) {
          goto start;
        } else {
          // -15595 -31374 -33144 38772 0
          //                  result[0]                 carry[2]               carry[2]                 carry[2]
          cc.setLiterals(4, coreI[r][7] + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
          cc.printClause(4,               0,                       0,                     0,                       1);
        }
      }
    }
    for (; b < 29; b++) {
      if (((sha_k[r + 18] >> (b + 2)) & 0x1) == 0) {
        start:
        // -1875 -14112 -14143 -15882 21510 0
        //                  result[0]                 carry[2]                result[2]               carry[2]                 carry[2]
        cc.setLiterals(5, coreI[r][7] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
        cc.printClause(5,               0,                       0,                       0,                     0,                       1);
      }
    }
  }
}

static void clause_4_39(ClauseCreator &cc) {
/*
    distance = 8
    modulcount = 5

    Clause with 4 literals is valid on bit -2
    While zero bits follow:
        Clause with 4 literals is valid
    If bit > 0:
        Clause with 5 literals is valid
    For every bit from max(0, bit) to 28 do:
         Clause with 5 literals is valid if const bit is zero

    valid for r < 39
*/
  for (unsigned r = 0; r < 39; r++) {
    signed b = -2;
    for (; true ; b++) {
      // 7916 -19866 -21636 27264 0
      // 15377 -28086 -29856 35484 0
      //                      carry[2]                 carry[2]               carry[2]                 carry[2]
      cc.setLiterals(4, coreN[r] + 319 + b, prepN[r + 16] + 129 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
      cc.printClause(4,                  1,                       0,                     0,                       1);
      if ((sha_k[r + 18] >> (b + 3)) & 0x1) {
        b++;
        goto start;
      }
    }
    for (; b < 29; b++) {
      // Exceptions
      if (r ==  0 && b ==  0) goto start;
      if (r == 10 && b ==  2) goto start;
      if (r == 11 && b == 10) goto start;
      if (r == 13 && b ==  3) goto start;
      if (r == 15 && b == 14) goto start;
      if (r == 17 && b == 17) goto start;
      if (r == 27 && b ==  7) goto start;
      if (r == 28 && b ==  5) goto start;

      if (((sha_k[r + 18] >> (b + 2)) & 0x1) == 0) {
        start:
        if (b < 0) continue;
        // -737 1088 -10002 -10033 -11772 17400 0
        //                  result[0]            carry[2]                 carry[2]                result[2]               carry[2]                 carry[2]
        cc.setLiterals(6, coreI[r][7] + b, coreN[r] + 319 + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
        cc.printClause(6,               0,                  1,                       0,                       0,                     0,                       1);
      }
    }
  }
}

static void clause_4_48(ClauseCreator &cc) {
  for (unsigned r = 0; r < 48; r++) {
    // .1
    if (in_array(r, 10, 0, 7, 16, 21, 23, 30, 31, 35, 37, 42)) {
      // -738 2 -6208 6270 -6271 10032 0
      // -28748 31467 -39214 39276 -39277 44556 0
      //                      result[1]        result[1]            carry[1]            carry[0]            carry[1]            result[1]
      cc.setLiterals(6, coreI[r][7] + 1, coreI[r][8] + 1, coreN[r + 9] + 318, coreN[r + 9] + 380, coreN[r + 9] + 381, prepN[r + 16] + 159);
      cc.printClause(6,               0,               1,                  0,                  1,                  0,                   1);

      // -737 2 -6208 6270 -6271 10032 0
      // -28747 31467 -39214 39276 -39277 44556 0
      //                  result[0]        result[1]            carry[1]            carry[0]            carry[1]            result[1]
      cc.setLiterals(6, coreI[r][7], coreI[r][8] + 1, coreN[r + 9] + 318, coreN[r + 9] + 380, coreN[r + 9] + 381, prepN[r + 16] + 159);
      cc.printClause(6,           0,               1,                  0,                  1,                  0,                   1);

      // -737 -738 2 -6208 6270 -6271 10032 0
      // -28747 -28748 31467 -39214 39276 -39277 44556 0
    }
    // .2
    for (unsigned b = 0; b < 3; b++) {
      if (b == 0 && !in_array(r, 21, 0, 3, 5, 6, 8, 12, 15, 18, 19, 22, 25, 26, 32, 33, 34, 36, 40, 42, 45, 46, 47)) break;
      if (b == 1 && !in_array(r, 8, 0, 5, 8, 26, 33, 40, 42, 47)) break;
      if (b == 2 && !in_array(r, 2, 42, 47)) break;

      // -9273 -11771 -19486 19548 -19549 24828 0
      //                      result[1]          carry[1]                carry[1]                carry[0]                carry[1]                result[1]
      cc.setLiterals(6, coreI[r][7] + 1 + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
      cc.printClause(6,                   0,                0,                      0,                      1,                      0,                       1);

      // -9272 -11771 -19486 19548 -19549 24828 0
      //                  result[0]          carry[1]                carry[1]                carry[0]                carry[1]                result[1]
      cc.setLiterals(6, coreI[r][7] + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
      cc.printClause(6,               0,                0,                      0,                      1,                      0,                       1);

      // -9272 -9273 -11771 -19486 19548 -19549 24828 0
    }
    // .3
    for (unsigned b = 0; b < 2; b++) {
      if (b == 0 && !in_array(r, 7, 21, 23, 27, 31, 35, 37, 41)) break;
      if (b == 1 && r != 31) break;

      unsigned carry_0 = (r == 27 || r == 41 ? CC_DC : 1);

      // -11485 14237 -21952 22014 -22015 27294 0
      // -13129 15881 -23596 23658 -23659 28938 0
      //                  result[0]          carry[1]                carry[1]                carry[0]                carry[1]                result[1]
      cc.setLiterals(6, coreI[r][7] + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
      cc.printClause(6,               0,                1,                      0,                carry_0,                      0,                       1);

      // -11486 14237 -21952 22014 -22015 27294 0
      // -13130 15881 -23596 23658 -23659 28938 0
      //                      result[1]          carry[1]                carry[1]                carry[0]                carry[1]                result[1]
      cc.setLiterals(6, coreI[r][7] + 1 + b, coreN[r] + 1 + b, coreN[r + 9] + 318 + b, coreN[r + 9] + 380 + b, coreN[r + 9] + 381 + b, prepN[r + 16] + 159 + b);
      cc.printClause(6,                   0,                1,                      0,                carry_0,                      0,                       1);
    }
    // .4
    if (in_array(r, 9, 0, 3, 4, 14, 18, 25, 29, 40, 42)) {
      // -642 2508 -7915 7977 -7978 12498 0
      // -14774 17556 -25240 25302 -25303 30582 0
      // -27104 29886 -37570 37632 -37633 42912 0
      //                      result[1]      result[1]            carry[1]            carry[0]            carry[1]            result[1]
      cc.setLiterals(6, coreI[r][7] + 1, coreN[r] + 32, coreN[r + 9] + 318, coreN[r + 9] + 380, coreN[r + 9] + 381, prepN[r + 16] + 159);
      cc.printClause(6,               0,             1,                  0,                  1,                  0,                   1);

      // -641 2508 -7915 7977 -7978 12498 0
      // -18061 20844 -28528 28590 -28591 33870 0
      //                  result[0]      result[1]            carry[1]            carry[0]            carry[1]            result[1]
      cc.setLiterals(6, coreI[r][7], coreN[r] + 32, coreN[r + 9] + 318, coreN[r + 9] + 380, coreN[r + 9] + 381, prepN[r + 16] + 159);
      cc.printClause(6,           0,             1,                  0,                  1,                  0,                   1);

      // -641 -642 2508 -7915 7977 -7978 12498 0
    }
  }
}

static void clause_3_39(ClauseCreator &cc) {
  for (unsigned r = 0; r < 39; r++) {
    {
      unsigned valid[39][31] = {
        {2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,1,0,0,0,0,0,2},
        {2,2,2,2,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,0,2,0,0,0,0,0,0,2,0,0,1,0,2,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,2,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
        {2,2,0,0,0,0,0,0,0,0,1,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,2,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2},
        {0,0,0,1,2,0,0,2,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,1,0,0,0,0,0,0,0},
        {1,2,2,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {1,1,2,0,0,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,2,0,0,0,0,2,0,0,1,2,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,2,0,2,0,1,0,0,0},
        {0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,2,2,2,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,1,1,0,1,0},
        {0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
        {0,0,1,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0},
        {0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,1,0,1,2,0,0,0,2},
        {1,1,1,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,2,0,0,0,0,0,0,1,0,0},
        {2,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0},
        {0,0,0,0,0,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,1,0,0,0,0,1,2,0,0,1,1,1,1,0,0,0,0,0,0,0,2,0,0,0,0,2,0,2,0},
        {1,2,0,0,0,1,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,0,0,0,0},
        {1,1,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,1,0,1,0,0,0,2},
        {2,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0},
        {1,1,2,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,2,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,2,0,0,0},
        {0,0,0,2,0,0,2,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0},
        {2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        if (valid[r][b] == 1) {
          // .1A
          // 773 -10035 -11775 17403 0
          //                carry[0]                result[0]               carry[1]                 carry[1]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 158 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 128 + b);
          cc.printClause(4,            1,                       0,                     0,                       1);
        }

        // .1B
        // 2478 -12468 -14238 19897 0
        // 2500 -12490 -14260 19919 0
        //                carry[0]                 carry[0]           carry[0]                result[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 158 + b);
        cc.printClause(4,            1,                       0,                 0,                       1);
      }
    }
    {
      unsigned valid[39][30] = {
        {1,1,1,0,0,0,1,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,1,1,1,2,0,0,0},
        {0,1,2,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,2,0,1,2,0,0,0,0,2,0,0,0,0,0,0,0,2,0,1,1,1,2,0,1,2,0,0,0},
        {2,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
        {0,0,1,2,0,1,1,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0},
        {2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,1,1,2,0,0,2,0,0,0,2},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {0,1,2,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,1,1,1,1,1,1,1,1,2,0,2,0,0,0,2,0,2,0,0,1,1,1,1,2,0},
        {1,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0},
        {1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,1,2,0,2,0,2,0,2},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,1,2,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,2,0},
        {0,1,1,1,1,1,1,2,0,1,2,0,1,2,0,0,0,0,2,0,0,0,0,0,0,1,2,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2},
        {1,1,1,1,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,0,1,1,2},
        {1,1,2,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,0,2,0,2,0,0,0,0,0},
        {1,0,2,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,2,0,1,2,0,2,0,0,0,0,1,2,0,0,0,0,0,0,0,2,0,0,0,0,0},
        {2,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,1,1,2,0,0,0,0},
        {1,1,1,2,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,1,2,0,0,0,2,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,1,2},
        {0,0,0,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0},
        {1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
        {0,0,0,0,0,0,0,0,0,0,2,0,1,2,0,1,1,2,0,0,2,0,0,0,1,1,1,2,0,0},
        {0,1,2,0,0,2,0,0,1,2,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,1,1,2,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0},
        {2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,2,0,0,2,0,0,0,2,0,0,0},
        {1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,1,2,0,0,2,0,0},
        {2,0,0,0,0,0,1,1,1,1,2,0,1,2,0,0,1,1,2,0,2,0,0,0,0,0,0,0,0,0},
        {1,1,2,0,1,1,2,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,1,1,2}
      };
      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        if (valid[r][b] == 1) {
          // .2A
          // -1339 10824 12595 -18223 0
          //                carry[0]                 carry[1]               carry[2]                 carry[2]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 2 + b, prepN[r + 25] + 129 + b);
          cc.printClause(4,            0,                       1,                     1,                       0);
        }

        // .2B
        // -1339 10824 12594 -18222 0
        //                carry[0]                 carry[1]               carry[1]                 carry[1]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 128 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 128 + b);
        cc.printClause(4,            0,                       1,                     1,                       0);
      }
    }
    {
      unsigned valid[39][31] = {
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0},
        {1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0},
        {0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0},
        {0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0},
        {1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1}
      };
      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        // .3
        // -2508 12467 14237 -19865 0
        //                    result[0]                 carry[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + 31 + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,                 0,                       1,                 1,                       0);
      }
    }
    {
      unsigned valid[39][31] = {
        {1,0,0,1,2,2,0,0,0,1,1,2,0,2,2,0,0,2,1,2,2,2,0,0,0,0,0,0,0,0,2},
        {1,1,0,0,2,2,0,0,0,0,2,2,2,0,2,0,1,1,2,0,1,2,2,1,2,2,0,0,1,1,2},
        {1,1,1,2,2,0,0,1,1,2,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2},
        {1,1,2,0,0,0,0,0,1,2,0,1,2,1,1,1,2,1,2,1,1,2,0,1,2,0,0,0,0,1,2},
        {1,1,1,1,2,1,2,0,0,2,2,0,0,0,1,2,1,1,2,1,2,0,2,0,2,2,0,0,0,2,0},
        {1,2,2,0,0,1,1,1,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,2,0,0,1,2,0,0},
        {1,0,2,2,0,2,0,2,0,2,2,2,0,0,0,1,1,1,1,1,1,2,2,2,1,2,2,0,0,0,0},
        {2,1,2,0,2,0,0,2,1,1,1,1,2,1,2,0,0,0,1,1,2,0,0,0,1,2,1,2,1,2,2},
        {1,1,1,1,2,2,0,0,0,0,0,2,1,2,1,1,1,1,2,2,2,2,2,2,2,2,1,1,2,0,2},
        {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0},
        {1,1,1,1,1,2,0,0,0,0,2,0,0,0,0,1,2,2,2,1,1,2,0,0,0,0,0,0,0,2,0},
        {1,2,0,0,0,0,0,1,2,1,1,1,1,1,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0},
        {2,1,2,1,1,1,2,1,2,0,1,1,2,0,0,0,0,0,1,1,1,2,0,0,0,0,0,0,1,1,2},
        {1,1,1,1,1,1,1,1,2,2,2,0,1,2,1,2,0,1,1,1,2,0,1,2,2,2,0,0,0,0,0},
        {1,1,2,2,1,2,1,2,1,1,2,0,0,0,0,0,0,0,0,1,2,0,1,1,1,2,0,1,2,0,0},
        {1,1,1,0,0,0,2,1,2,2,2,1,1,1,1,1,1,2,1,1,2,2,1,1,2,0,0,0,0,0,2},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,2,0,0,2,0,0,0,0,0,1,2},
        {1,1,2,2,0,0,0,1,1,1,2,0,0,0,2,2,1,1,1,1,1,2,1,1,1,1,1,2,0,1,2},
        {1,1,2,2,0,0,0,1,2,0,1,1,2,0,0,1,2,0,0,0,0,0,1,1,1,1,1,2,2,0,0},
        {2,0,1,2,0,0,1,1,2,0,0,0,0,2,1,2,2,0,1,2,2,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,2,1,1,2,2,0,0,1,2,1,2,0,0,2,0,0,2,1,1,1,1,2,1,1,2,1,2,2},
        {1,2,0,2,1,2,1,2,2,1,2,0,0,0,0,2,2,0,2,1,1,1,2,2,1,2,1,2,0,0,2},
        {2,1,1,1,2,0,1,1,2,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,2},
        {1,2,1,1,2,1,1,2,2,0,0,2,2,0,0,1,2,0,0,0,0,1,1,2,1,1,2,0,1,1,2},
        {1,1,1,1,2,0,0,0,0,0,0,0,2,1,2,0,0,0,1,1,1,2,0,0,0,0,0,1,2,2,0},
        {2,0,1,2,1,1,2,0,0,1,2,2,0,0,0,1,2,2,0,0,1,2,0,0,0,0,0,2,1,2,0},
        {2,2,1,2,0,0,1,1,1,1,2,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,2,0},
        {1,1,2,2,2,0,1,1,1,1,1,1,1,1,2,1,2,2,1,1,2,1,2,0,1,1,1,1,1,2,0},
        {1,2,0,0,1,1,1,1,1,2,0,2,0,0,0,0,0,0,0,0,0,1,1,2,1,1,2,2,0,0,0},
        {1,1,1,1,0,0,0,0,2,2,2,1,2,0,0,0,1,1,2,0,0,0,0,1,2,1,2,1,2,1,2},
        {1,2,0,0,0,0,2,1,1,2,2,2,1,1,2,0,0,2,0,2,2,0,1,2,0,1,2,0,0,0,0},
        {1,1,1,2,1,1,2,1,2,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,2,0,0,0,0,2,0,0,0,2,0,0,0,0,1,1,2,0,1,2,0,1,1,1,2,2,1,2,2},
        {2,2,0,1,1,2,2,0,2,2,0,0,0,0,0,0,1,2,1,1,2,0,0,0,0,1,1,2,0,0,0},
        {2,0,1,1,1,1,1,1,2,1,1,2,1,1,2,2,2,1,1,2,0,2,2,1,2,1,1,2,0,0,2},
        {1,2,2,0,2,2,0,0,2,0,1,2,2,0,0,0,0,0,0,0,0,2,0,0,1,2,0,0,2,1,2},
        {2,0,0,0,2,1,2,1,1,2,2,0,1,1,2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,1,2},
        {1,2,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,2,0,1,1,2},
        {1,1,1,2,1,2,0,0,2,0,0,2,2,1,1,2,0,0,0,0,0,0,1,1,2,2,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 31; b++) {
        if (valid[r][b] == 0) continue;

        if (valid[r][b] == 1) {
          // .4A
          // 13427 -26453 -28222 33850 0
          //                    carry[1]                 carry[1]           carry[0]                 carry[0]
          cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 16] + 128 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
          cc.printClause(4,                1,                       0,                 0,                       1);
        }

        // .4B
        // 5333 -16588 -18358 23986 0
        //                carry[0]                 carry[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,            1,                       0,                 0,                       1);
      }
    }
    {
      unsigned valid[39][29] = {
        {1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0},
        {1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0},
        {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,1},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0},
        {1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1},
        {1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,0},
        {1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1},
        {0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1},
        {1,0,0,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0},
        {1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1},
        {1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1},
        {1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0},
        {1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
        {0,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,1},
        {0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1},
        {1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0},
        {1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        {0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1},
        {0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0},
        {1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,0},
        {1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0},
        {1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,1},
        {1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0},
        {1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1},
        {0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1},
        {0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0},
        {1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1},
        {0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1},
        {0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1},
        {1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,1},
        {1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0},
        {1,1,1,1,0,1,0,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0},
        {1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0},
        {0,0,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;
        // .5
        // -15060 28086 28116 29855 -35484 0
        //                    carry[2]                 carry[2]                result[1]               carry[0]                 carry[2]
        cc.setLiterals(5, coreN[r] + 2 + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 159 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 129 + b);
        cc.printClause(5,                0,                       1,                       1,                     1,                       0);
      }
    }
    {
      unsigned valid[39][30] = {
        {1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1},
        {1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1},
        {1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0},
        {1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1},
        {1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0},
        {1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1},
        {1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0},
        {1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0},
        {0,1,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1},
        {1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0},
        {0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0},
        {1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0},
        {1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1},
        {1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
        {1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0},
        {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0},
        {0,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
        {0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1},
        {1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .6
        // 15881 -28938 -30676 36305 36336 0
        //                    carry[1]                result[1]           carry[0]                 carry[1]                result[1]
        cc.setLiterals(5, coreN[r] + 1 + b, prepN[r + 16] + 159 + b, coreN[r + 18] + b, prepN[r + 25] + 128 + b, prepN[r + 25] + 159 + b);
        cc.printClause(5,                1,                       0,                 0,                       1,                       1);
      }
    }
    {
      unsigned valid[39][29] = {
        {0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0},
        {0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0},
        {1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0},
        {1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0},
        {1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1},
        {0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0},
        {1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
        {1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1},
        {1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,0},
        {1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1},
        {0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1},
        {1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,0,1},
        {1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0},
        {1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,1},
        {1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0},
        {1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0},
        {0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0}
      };

      for (unsigned b = 0; b < 29; b++) {
        if (valid[r][b] == 0) continue;

        // .7
        // 16714 -29742 -29773 -31511 37140 0
        //                carry[0]                 carry[2]                result[2]               carry[1]                 carry[2]
        cc.setLiterals(5, coreN[r] + b, prepN[r + 16] + 129 + b, prepN[r + 16] + 160 + b, coreN[r + 18] + 1 + b, prepN[r + 25] + 129 + b);
        cc.printClause(5,            1,                       0,                       0,                     0,                       1);
      }
    }
    for (unsigned b = 0; (sha_k[r + 18] >> b) & 0x1; b++) {
        // .8
        // 8167 20687 22457 -28085 0
        // 10949 23975 25745 -31373 0
        //                carry[0]                 carry[0]           carry[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
        cc.printClause(4,            1,                       1,                 1,                       0);
    }
    {
      unsigned valid[39][16] = {
        {1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
        {1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0},
        {0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b + 0] == 1) {
          // .9
          // -17525 30551 32321 -38012 0
          //                carry[0]                 carry[0]           carry[0]                 carry[0]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 127 + b, coreN[r + 18] + b, prepN[r + 25] + 190 + b);
          cc.printClause(4,            0,                       1,                 1,                       0);
        }
        if (valid[r][b + 4] == 1) {
          // .10
          // 8736 -21572 -23279 28907 0
          //                carry[0]                 carry[0]           carry[0]                 carry[0]
          cc.setLiterals(4, coreN[r] + b, prepN[r + 16] + 190 + b, coreN[r + 18] + b, prepN[r + 25] + 127 + b);
          cc.printClause(4,            1,                       0,                 0,                       1);
        }
        if (valid[r][b + 8] == 1) {
          // .11
          // 19991 -33080 -33111 -34786 40415 0
          //                    carry[1]                 carry[1]                 result[1]           carry[0]                 carry[1]
          cc.setLiterals(5, coreN[r] + 1 + b, prepN[r + 16] + 191 + b, coreI[r + 16][8] + 1 + b, coreN[r + 18] + b, prepN[r + 25] + 128 + b);
          cc.printClause(5,                1,                       0,                        0,                 0,                       1);
        }
        if (b > 0 && valid[r][b + 12] == 1) {
          // for b == 0 already set by Add_Half_1:
          // cc.printClause(4,               1,                  0,                   CC_DC,                   CC_DC);

          // .12
          // 738 -1087 10001 -17399 0
          //                  result[0]            carry[0]                 carry[0]                 carry[0]
          cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, prepN[r + 16] + 127 + b, prepN[r + 25] + 127 + b);
          cc.printClause(4,               1,                  0,                       1,                       0);
        }
      }
    }
    {
    }
    {
    }
  }
}

static void clause_3_48(ClauseCreator &cc) {
  for (unsigned r = 0; r < 48; r++) {
    {
      unsigned valid[48][30] = {
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 30; b++) {
        if (valid[r][b] == 0) continue;

        // .1
        // -680 2232 7036 -11652 0
        // -3582 5639 10949 -16577 0
        //                  result[0]            carry[1]              carry[1]                 carry[1]
        cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 318 + b, coreN[r + 9] + 1 + b, prepN[r + 16] + 128 + b);
        cc.printClause(4,               0,                  1,                    1,                       0);
      }
    }
    {
      unsigned valid[48][32] = {
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0}
      };
      for (unsigned b = 1; b < 8; b++) {
        // for b == 0 already set by Add_Half_1:
        // cc.printClause(4,               1,                  0,            CC_DC,                   CC_DC);

        //                  result[0]            carry[0]          carry[0]                result[0]
        cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, coreN[r + 9] + b, prepN[r + 16] + 158 + b);

        if (valid[r][b + 8] == 1 && valid[r][b + 16] == 1) {
          // .2.2 & .2.3
          cc.printClause(4,             1,                  0,                0,                   CC_DC);
          continue;
        }

        if (valid[r][b] == 1) {
          // .2.1
          // 1307 -3363 8167 -13320 0
          // 6997 -9053 15881 -21540 0
          // 18062 -21130 28211 -33870 0
          cc.printClause(4,             1,                  0,                1,                       0);
        }

        if (valid[r][b + 8] == 1) {
          // .2.2
          // 1307 -3363 -8167 13320 0
          // 6997 -9053 -15881 21540 0
          // 18062 -21130 -28211 33870 0
          cc.printClause(4,             1,                  0,                0,                       1);
        }

        if (valid[r][b + 16] == 1) {
          // .2.3
          cc.printClause(4,             1,                  0,                0,                       0);
        }

        if (valid[r][b + 24] == 1) {
          // .2.4
          cc.printClause(4,             1,                  0,                1,                       1);
        }
      }
    }
    {
      unsigned valid[48][20] = {
        {1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0}
      };
      for (unsigned b = 0; b < 4; b++) {
        // .3.1:   -2477 -7915 12467 0
        // .3.5:   15881 -23596 -28907 0
        //
        // .3.1:   cc.printClause(3, 0,                      0,                       1);
        // .3.2:   cc.printClause(3, 0,                      0,                       0);
        // .3.3-4: cc.printClause(3, 0,                      1,                   CC_DC);
        // .3.3:   cc.printClause(3, 0,                      1,                       0);
        // .3.4:   cc.printClause(3, 0,                      1,                       1);
        // .3.5:   cc.printClause(3, 1,                      0,                       0);
        // .3.6:   cc.printClause(3, 1,                      1,                       0);
        //
        //                carry[0]                carry[0]                 carry[0]
        cc.setLiterals(3, coreN[r] + b, coreN[r + 9] + 317 + b, prepN[r + 16] + 127 + b);

        unsigned testval = (valid[r][b + 0] << 2) | (valid[r][b + 4] << 1) | valid[r][b + 8];
        switch (testval) {
          case 1: cc.printClause(3,  0,                      1,                   CC_DC); break;
          case 2: cc.printClause(3,  0,                      0,                       0); break;
          case 3: cc.printClause(3,  0,                      0,                       0);
                  cc.printClause(3,  0,                      1,                   CC_DC); break;
          case 4: cc.printClause(3,  0,                      0,                       1); break;
          case 5: cc.printClause(3,  0,                      0,                       1);
                  cc.printClause(3,  0,                      1,                   CC_DC); break;
          case 6: cc.printClause(3,  0,                      0,                   CC_DC);
          // already set by ConstAdd_32
          // case 7: cc.printClause(3,  0,                  CC_DC,                   CC_DC); break;
        }
        testval = valid[r][b + 12] + valid[r][b + 16];
        if (testval > 0) {
          if (testval == 1) {
            cc.printClause(3,        1,       valid[r][b + 16],                       0);
          } else {
            cc.printClause(3,        1,                  CC_DC,                       0);
          }
        }
      }
    }
    {
      unsigned valid[48][8] = {
        {1,1,1,0,1,1,1,0},
        {0,1,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,1,0},
        {0,1,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,0,0},
        {1,1,1,0,1,1,1,0},
        {0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {0,0,0,0,1,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,0,1,1,1,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,0,0,0,1,0,0,0},
        {0,1,0,0,1,0,0,0},
        {0,0,0,1,1,1,1,0},
        {0,0,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,1},
        {1,0,0,0,0,0,0,0},
        {0,1,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0},
        {1,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1}
      };
      for (unsigned b = 0; b < 4; b++) {
        // .4.1:   -1339 4721 6808 10823 0
        // .4.2:   -2477 5859 -7946 12467 0
        //
        //                carry[0]            result[0]               result[0]                 carry[0]
        cc.setLiterals(4, coreN[r] + b, coreI[r + 9][7] + b, coreN[r + 9] + 348 + b, prepN[r + 16] + 127 + b);

        unsigned testval = valid[r][b + 0] + valid[r][b + 4];
        if (testval > 0) {
          if (testval == 1) {
            cc.printClause(4,        0,                   1,        valid[r][b + 0],                       1);
          } else {
            cc.printClause(4,        0,                   1,                  CC_DC,                       1);
          }
        }
      }
    }
    {
      unsigned valid[48][4] = {
        {1,1,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,1,1,0},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,0},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,1,1,0},
        {1,0,1,1},
        {1,1,1,0},
        {1,0,1,0},
        {1,0,1,1},
        {1,0,1,1},
        {1,0,1,0},
        {1,0,1,0}
      };
      for (unsigned b = 1; b < 2; b++) {
        // for b == 0 already set by Add_Half_1:
        // cc.printClause(4,               1,                  0,                CC_DC,                   CC_DC);

        // .5.1:   738 -1087 5922 10032 0
        // .5.2:   738 -1087 -5922 -10032 0
        //
        //                  result[0]            carry[0]              result[0]                result[0]
        cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, coreN[r + 9] + 31 + b, prepN[r + 16] + 158 + b);
        if (valid[r][b + 0] == 1 || valid[r][b + 2] == 1) {
          // .5.1 & .5.3
          cc.printClause(4,             1,                  0,       valid[r][b + 0],                       1);
          // .5.2 & .5.4
          cc.printClause(4,             1,                  0,       valid[r][b + 2],                       0);
        }
      }
    }
    {
      unsigned valid[48][28] = {
        {1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0},
        {1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
        {1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0},
        {1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0},
        {1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0}
      };

      for (unsigned b = 0; b < 4; b++) {
        if (valid[r][b + 0] == 1) {
          // .6
          // 738 -1087 -5890 10001 0
          //                      result[1]            carry[1]          carry[0]                 carry[1]
          cc.setLiterals(4, coreI[r][7] + 1 + b, coreN[r] + 318 + b, coreN[r + 9] + b, prepN[r + 16] + 128 + b);
          cc.printClause(4,                   1,                  0,                0,                       1);
        }
        if (b > 0 && valid[r][b + 4] == 1) {
          // for b == 0 already set by Add_Half_1:
          // cc.printClause(4,               1,                  0,                 CC_DC,                   CC_DC);

          // .7
          // 738 -1087 -5922 10001 0
          //                  result[0]            carry[0]              result[0]                 carry[0]
          cc.setLiterals(4, coreI[r][7] + b, coreN[r] + 317 + b, coreN[r + 9] + 31 + b, prepN[r + 16] + 127 + b);
          cc.printClause(4,               1,                  0,                     0,                       1);
        }
        if (valid[r][b + 8] == 1) {
          // .8
          // 1338 -6777 -10823 10853 0
          //                carry[0]                carry[1]                 carry[1]                result[0]
          cc.setLiterals(4, coreN[r] + b, coreN[r + 9] + 318 + b, prepN[r + 16] + 128 + b, prepN[r + 16] + 158 + b);
          cc.printClause(4,            1,                      0,                       0,                       1);
        }
        if (valid[r][b + 12] == 1) {
          // .9
          // -2476 5859 -7915 12467 0
          //                carry[0]                result[1]                carry[1]                 carry[1]
          cc.setLiterals(4, coreN[r] + b, coreI[r + 9][7] + 1 + b, coreN[r + 9] + 318 + b, prepN[r + 16] + 128 + b);
          cc.printClause(4,            0,                       1,                      0,                       1);
        }
        if (valid[r][b + 16] == 1) {
          // .10
          // -2477 -7915 -12497 -12498 0
          //                    carry[1]                carry[1]                result[0]                result[1]
          cc.setLiterals(4, coreN[r] + 1 + b, coreN[r + 9] + 318 + b, prepN[r + 16] + 158 + b, prepN[r + 16] + 159 + b);
          cc.printClause(4,                0,                      0,                       0,                       0);
        }
        if (valid[r][b + 20] == 1 || valid[r][b + 24] == 1) {
          // .11.1:   -23279 -30994 -31057 36336 0
          // .11.1:   -34787 -42502 -42565 47844 0
          // .11.2:   19169 -26884 -26947 32226 0
          // .11.2:   30677 -38392 -38455 43734 0
          //
          //                      carry[0]                carry[0]                carry[0]                result[0]
          cc.setLiterals(4,       coreN[r] + b, coreN[r + 9] + 317 + b, coreN[r + 9] + 380 + b, prepN[r + 16] + 158 + b);

          if (valid[r][b + 20] == 1 && valid[r][b + 24] == 1) {
            cc.printClause(4,            CC_DC,                      0,                      0,                       1);
          } else {
            cc.printClause(4, valid[r][b + 24],                      0,                      0,                       1);
          }
        }
      }
    }
    {
      unsigned valid[48][18] = {
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
      };

      for (unsigned b = 0; b < 18; b++) {
        if (valid[r][b] == 0) continue;

        // .13
        // prepN[r + 11] is valid because there is no valid bit below r = 5
        // 29872 38672 -38737 -42897 0                 SSIG0
        //                    carry[1]              result[12]               carry[13]                 carry[0]
        cc.setLiterals(4, coreN[r] + 1 + b, prepN[r + 11] + 12 + b, prepN[r + 11] + 77 + b, prepN[r + 16] + 127 + b);
        cc.printClause(4,                1,                      1,                      0,                       0);
      }
    }
    {
    }
  }
}
